<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>远芳</title>
  
  <subtitle>Yo quiero vivir</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yuanfang.tech/"/>
  <updated>2019-08-12T16:32:44.467Z</updated>
  <id>https://yuanfang.tech/</id>
  
  <author>
    <name>Mengfei Liu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>poj1789</title>
    <link href="https://yuanfang.tech/2019/08/13/poj1789.html"/>
    <id>https://yuanfang.tech/2019/08/13/poj1789.html</id>
    <published>2019-08-12T16:29:16.000Z</published>
    <updated>2019-08-12T16:32:44.467Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p></p><p class="description"></p><br>poj1789，最小生成树，水= =<p></p><a id="more"></a><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="http://poj.org/problem?id=1789" target="_blank" rel="noopener">http://poj.org/problem?id=1789</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>n个车牌号，刚开始只有一个车牌，其他车牌都是由一个车牌直接或间接产生</p><p>一个车牌到另一个车牌的产生权值是它们之间的数字不同的个数</p><p>输出最小生成树边权和倒数</p><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><p>水！</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">2010</span>][<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> e[<span class="number">2010</span>][<span class="number">2010</span>];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> lowcost[<span class="number">2010</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">prim</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">lowcost[i]=e[<span class="number">1</span>][i];</span><br><span class="line">&#125;</span><br><span class="line">lowcost[<span class="number">1</span>]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> j,min=inf,temp;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(lowcost[j]!=<span class="number">-1</span>&amp;&amp;lowcost[j]&lt;min)</span><br><span class="line">&#123;</span><br><span class="line">min=lowcost[j];</span><br><span class="line">temp=j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans=ans+lowcost[temp];</span><br><span class="line">lowcost[temp]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(e[temp][j]&lt;lowcost[j])</span><br><span class="line">&#123;</span><br><span class="line">lowcost[j]=e[temp][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n),n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,k,sum;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,s[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=i;j&lt;=n;j++)</span><br><span class="line">&#123;</span><br><span class="line">e[i][j]=inf;</span><br><span class="line"><span class="keyword">if</span>(i==j)e[i][j]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=i;j&lt;=n;j++)</span><br><span class="line">&#123;</span><br><span class="line">sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;<span class="number">7</span>;k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i][k]!=s[j][k])sum++;</span><br><span class="line">&#125;</span><br><span class="line">e[i][j]=sum;</span><br><span class="line">e[j][i]=sum;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"The highest possible quality is 1/%d.\n"</span> ,prim()) ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p class=&quot;description&quot;&gt;&lt;/p&gt;&lt;br&gt;poj1789，最小生成树，水= =&lt;p&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="poj" scheme="https://yuanfang.tech/categories/poj/"/>
    
    
      <category term="kuangbin" scheme="https://yuanfang.tech/tags/kuangbin/"/>
    
      <category term="poj" scheme="https://yuanfang.tech/tags/poj/"/>
    
      <category term="prim" scheme="https://yuanfang.tech/tags/prim/"/>
    
  </entry>
  
  <entry>
    <title>快速输入</title>
    <link href="https://yuanfang.tech/2019/08/12/%E5%BF%AB%E9%80%9F%E8%BE%93%E5%85%A5.html"/>
    <id>https://yuanfang.tech/2019/08/12/快速输入.html</id>
    <published>2019-08-12T14:31:20.000Z</published>
    <updated>2019-08-12T15:49:35.221Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p></p><p class="description"></p><br>终极蛇皮之求求你做个人吧偷鸡过TLE之快速输入<p></p><p><img src="http://pv35325dx.bkt.clouddn.com/shua.gif" alt></p><p>cin 没有 scanf 快，那么还有比 scanf还快的输入吗？那就是getchar()，它比scanf快多了，输入挂就是根据它写的，具体代码（代码是看大牛的）如下：</p><a id="more"></a><h3 id="int："><a href="#int：" class="headerlink" title="int："></a>int：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">scan_d</span><span class="params">(<span class="keyword">int</span> &amp;num)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">char</span> in;<span class="keyword">bool</span> IsN=<span class="literal">false</span>;</span><br><span class="line">        in=getchar();</span><br><span class="line">        <span class="keyword">if</span>(in==EOF) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">while</span>(in!=<span class="string">'-'</span>&amp;&amp;(in&lt;<span class="string">'0'</span>||in&gt;<span class="string">'9'</span>)) in=getchar();</span><br><span class="line">        <span class="keyword">if</span>(in==<span class="string">'-'</span>)&#123; IsN=<span class="literal">true</span>;num=<span class="number">0</span>;&#125;</span><br><span class="line">        <span class="keyword">else</span> num=in-<span class="string">'0'</span>;</span><br><span class="line">        <span class="keyword">while</span>(in=getchar(),in&gt;=<span class="string">'0'</span>&amp;&amp;in&lt;=<span class="string">'9'</span>)&#123;</span><br><span class="line">                num*=<span class="number">10</span>,num+=in-<span class="string">'0'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(IsN) num=-num;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="double："><a href="#double：" class="headerlink" title="double："></a>double：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">scan_lf</span><span class="params">(<span class="keyword">double</span> &amp;num)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">char</span> in;<span class="keyword">double</span> Dec=<span class="number">0.1</span>;</span><br><span class="line">        <span class="keyword">bool</span> IsN=<span class="literal">false</span>,IsD=<span class="literal">false</span>;</span><br><span class="line">        in=getchar();</span><br><span class="line">        <span class="keyword">if</span>(in==EOF) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">while</span>(in!=<span class="string">'-'</span>&amp;&amp;in!=<span class="string">'.'</span>&amp;&amp;(in&lt;<span class="string">'0'</span>||in&gt;<span class="string">'9'</span>))</span><br><span class="line">                in=getchar();</span><br><span class="line">        <span class="keyword">if</span>(in==<span class="string">'-'</span>)&#123;IsN=<span class="literal">true</span>;num=<span class="number">0</span>;&#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(in==<span class="string">'.'</span>)&#123;IsD=<span class="literal">true</span>;num=<span class="number">0</span>;&#125;</span><br><span class="line">        <span class="keyword">else</span> num=in-<span class="string">'0'</span>;</span><br><span class="line">        <span class="keyword">if</span>(!IsD)&#123;</span><br><span class="line">                <span class="keyword">while</span>(in=getchar(),in&gt;=<span class="string">'0'</span>&amp;&amp;in&lt;=<span class="string">'9'</span>)&#123;</span><br><span class="line">                        num*=<span class="number">10</span>;num+=in-<span class="string">'0'</span>;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(in!=<span class="string">'.'</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(IsN) num=-num;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">while</span>(in=getchar(),in&gt;=<span class="string">'0'</span>&amp;&amp;in&lt;=<span class="string">'9'</span>)&#123;</span><br><span class="line">                        num+=Dec*(in-<span class="string">'0'</span>);Dec*=<span class="number">0.1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(IsN) num=-num;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="求求你做个人吧终极版本："><a href="#求求你做个人吧终极版本：" class="headerlink" title="求求你做个人吧终极版本："></a>求求你做个人吧终极版本：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">// *Copyright by i.Pear Works*</span></span><br><span class="line"><span class="comment">//本IO模块的用途是方便地读写大量整数</span></span><br><span class="line"><span class="comment">//若题目整数不多 请改用关闭同步锁的cin(因为本模块不支持关闭同步锁)或scanf</span></span><br><span class="line"><span class="keyword">namespace</span> FastIO&#123;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//不支持while(qin&gt;&gt;x)的多组数据输入方法</span></span><br><span class="line"><span class="comment">//任何情况下请不要关闭sync_with_stdio同步锁!!</span></span><br><span class="line"><span class="comment">//如果您选择关闭同步锁以获得更高的cin/cout速度 使用此模块会导致不可预期的后果</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//此处为负数读取功能开关</span></span><br><span class="line"><span class="comment">//若程序不会读入负数 请去除下方注释符号 以获得30%的输入提速</span></span><br><span class="line"><span class="comment">//#define DisableNegative true</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//此处为兼容性模式开关 若程序IO存在 *任何* *int/ll/char[]/string/char(包括空格回车)* 之外的类型</span></span><br><span class="line"><span class="comment">//请去除下方注释符号 降低一半的速度以获得兼容性</span></span><br><span class="line"><span class="comment">//#define EnableCompatibility true</span></span><br><span class="line"> </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Scanner</span>&#123;</span></span><br><span class="line">        <span class="keyword">char</span> cht;</span><br><span class="line">        <span class="keyword">bool</span> ifNegative;</span><br><span class="line">        <span class="keyword">char</span> stringBuf[<span class="number">10000</span>];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> EnableCompatibility</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUF_SIZE 524288</span></span><br><span class="line">        <span class="function"><span class="keyword">char</span> <span class="title">nc</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">static</span> <span class="keyword">char</span> buf[BUF_SIZE],*p1=buf+BUF_SIZE,*pend=buf+BUF_SIZE;</span><br><span class="line">            <span class="keyword">if</span>(p1==pend)&#123;</span><br><span class="line">                p1=buf;</span><br><span class="line">                pend=buf+fread(buf,<span class="number">1</span>,BUF_SIZE,<span class="built_in">stdin</span>);</span><br><span class="line">                <span class="keyword">if</span>(pend==p1)<span class="keyword">return</span> <span class="string">' '</span>;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> DisableNegative</span></span><br><span class="line">            <span class="keyword">if</span>(*p1==<span class="string">'-'</span>)&#123;</span><br><span class="line">                ifNegative=<span class="literal">true</span>;</span><br><span class="line">                p1++;</span><br><span class="line">                <span class="keyword">return</span> nc();</span><br><span class="line">            &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">            <span class="keyword">return</span> *p1++;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">nc</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> getchar();</span><br><span class="line">        &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">blank</span><span class="params">(<span class="keyword">char</span> ch)</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> ch==<span class="string">'\r'</span>||ch==<span class="string">'\n'</span>||ch==<span class="string">' '</span>||ch==<span class="string">'\t'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        Scanner <span class="keyword">operator</span>&gt;&gt;(<span class="keyword">int</span>&amp;x)&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> DisableNegative</span></span><br><span class="line">            ifNegative=<span class="literal">false</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">            <span class="keyword">while</span>(blank(cht=nc()));</span><br><span class="line">            <span class="keyword">for</span>(x=cht-<span class="string">'0'</span>;(cht=nc())&gt;=<span class="string">'0'</span>&amp;&amp;cht&lt;=<span class="string">'9'</span>;x=x*<span class="number">10</span>+cht-<span class="string">'0'</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> DisableNegative</span></span><br><span class="line">            <span class="keyword">if</span>(ifNegative)x*=<span class="number">-1</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Scanner <span class="keyword">operator</span>&gt;&gt;(<span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span>&amp;x)&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> DisableNegative</span></span><br><span class="line">            ifNegative=<span class="literal">false</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">            <span class="keyword">while</span>(blank(cht=nc()));</span><br><span class="line">            <span class="keyword">for</span>(x=cht-<span class="string">'0'</span>;(cht=nc())&gt;=<span class="string">'0'</span>&amp;&amp;cht&lt;=<span class="string">'9'</span>;x=x*<span class="number">10</span>+cht-<span class="string">'0'</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> DisableNegative</span></span><br><span class="line">            <span class="keyword">if</span>(ifNegative)x*=<span class="number">-1</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Scanner <span class="keyword">operator</span>&gt;&gt;(<span class="built_in">string</span>&amp;str)&#123;</span><br><span class="line">            <span class="keyword">int</span> p=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(blank(cht=nc()));</span><br><span class="line">            <span class="keyword">for</span>(stringBuf[p++]=cht;!blank(cht=nc());stringBuf[p++]=cht);</span><br><span class="line">            stringBuf[p]=<span class="string">'\0'</span>;</span><br><span class="line">            str=stringBuf;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Scanner <span class="keyword">operator</span>&gt;&gt;(<span class="keyword">char</span> str[])&#123;</span><br><span class="line">            <span class="keyword">int</span> p=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(blank(cht=nc()));</span><br><span class="line">            <span class="keyword">for</span>(str[p++]=cht;!blank(cht=nc());str[p++]=cht);</span><br><span class="line">            str[p]=<span class="string">'\0'</span>;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> F&gt;</span><br><span class="line">        <span class="keyword">inline</span> Scanner <span class="keyword">operator</span>&gt;&gt;(F&amp;f)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;f;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"> </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Printer</span>&#123;</span></span><br><span class="line">        <span class="keyword">int</span> num;</span><br><span class="line">        <span class="keyword">char</span> chr[<span class="number">21</span>];</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        Printer <span class="keyword">operator</span>&lt;&lt;(<span class="keyword">int</span> x)&#123;</span><br><span class="line">            <span class="keyword">if</span>(x==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">putchar</span>(<span class="string">'0'</span>);</span><br><span class="line">                <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(x&lt;<span class="number">0</span>)x*=<span class="number">-1</span>,<span class="built_in">putchar</span>(<span class="string">'-'</span>);</span><br><span class="line">            num=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(x) chr[++num]=(x%<span class="number">10</span>)+<span class="number">48</span>,x/=<span class="number">10</span>;</span><br><span class="line">            <span class="keyword">while</span>(num) <span class="built_in">putchar</span>(chr[num--]);</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Printer <span class="keyword">operator</span>&lt;&lt;(<span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> x)&#123;</span><br><span class="line">            <span class="keyword">if</span>(x==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">putchar</span>(<span class="string">'0'</span>);</span><br><span class="line">                <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(x&lt;<span class="number">0</span>)x*=<span class="number">-1</span>,<span class="built_in">putchar</span>(<span class="string">'-'</span>);</span><br><span class="line">            num=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(x) chr[++num]=(x%<span class="number">10</span>)+<span class="number">48</span>,x/=<span class="number">10</span>;</span><br><span class="line">            <span class="keyword">while</span>(num) <span class="built_in">putchar</span>(chr[num--]);</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">inline</span> Printer <span class="keyword">operator</span>&lt;&lt;(<span class="keyword">char</span> x)&#123;</span><br><span class="line">            <span class="built_in">putchar</span>(x);</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Printer <span class="keyword">operator</span>&lt;&lt;(<span class="keyword">const</span> <span class="keyword">char</span> str[])&#123;</span><br><span class="line">            <span class="keyword">int</span> p=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(str[p]!=<span class="string">'\0'</span>)&#123;</span><br><span class="line">                <span class="built_in">putchar</span>(str[p++]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">inline</span> Printer <span class="keyword">operator</span>&lt;&lt;(<span class="built_in">string</span>&amp;x)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="built_in">string</span>::iterator i=x.begin();i&lt;x.end();i++)<span class="built_in">putchar</span>(*i);</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">template</span>&lt;<span class="keyword">typename</span> F&gt;</span><br><span class="line">        <span class="keyword">inline</span> Printer <span class="keyword">operator</span>&lt;&lt;(F&amp;f)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;f;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    Scanner qin;</span><br><span class="line">    Printer qout;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> FastIO;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//-----------------模板到此结束 以下是测试代码--------------------</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//test</span></span><br><span class="line">    freopen(<span class="string">"D:\\1.txt"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> arr[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        qin&gt;&gt;arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        qout&lt;&lt;arr[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// !!run this test with "EnableCompatibility" mode on</span></span><br><span class="line">    freopen(<span class="string">"D:\\1.txt"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> b;</span><br><span class="line">    <span class="keyword">int</span> c;</span><br><span class="line">    <span class="keyword">double</span> d;</span><br><span class="line">    <span class="built_in">string</span> e;</span><br><span class="line">    <span class="keyword">float</span> f;</span><br><span class="line"> </span><br><span class="line">    qin&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;d&gt;&gt;e&gt;&gt;f;</span><br><span class="line">    qout&lt;&lt;a&lt;&lt;<span class="string">" "</span>&lt;&lt;b&lt;&lt;<span class="built_in">endl</span>&lt;&lt;c&lt;&lt;<span class="string">" "</span>&lt;&lt;d&lt;&lt;<span class="built_in">endl</span>&lt;&lt;e&lt;&lt;<span class="string">" "</span>&lt;&lt;f;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的“兼容性模式”是不再建立缓冲区而用疯狂getchar替代 这样不会把后面不是整数的数据也存进缓冲区</p><p>实验证明这样速度会慢一半 但是也比scanf快得多</p><p>如果不需要读取负数 可以打开上面DisableNegative的开关 编译时会少几个判断 效率也有一些提升</p><p>在不开启兼容性+DisableNegative的模式下 和原模板的速度没有区别</p><p><strong>简述一下用法：</strong>只要把这段代码粘贴到您代码的最上方 然后使用qin,qout（q是quick的意思）代替cin,cout就可以了</p><p>所有的输入输出都使用运算符&lt;&lt;,&gt;&gt;来进行</p><p>经过测速 虽然用了大量的反复重载和类 速度并未改变 但从使用上来说也许会更方便一些</p><p><strong>已知的一些问题：</strong></p><p>1.qout不能正确的输出-9223372036854775808这个数（ll的最小值）因为去掉符号会溢出</p><p>但只有这一个数不能用 实际需要输出这个数的场合也不多见  就不为了它降低整体效率了</p><p>2.快速写部分对于绝大多数类型都有加速作用 但是快读只对整数类型起作用</p><p><strong>如果数据中不是含有大量的整数 请慎用此模板（因为与sync_with_stdio不共存）</strong></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p class=&quot;description&quot;&gt;&lt;/p&gt;&lt;br&gt;终极蛇皮之求求你做个人吧偷鸡过TLE之快速输入&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://pv35325dx.bkt.clouddn.com/shua.gif&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;cin 没有 scanf 快，那么还有比 scanf还快的输入吗？那就是getchar()，它比scanf快多了，输入挂就是根据它写的，具体代码（代码是看大牛的）如下：&lt;/p&gt;
    
    </summary>
    
      <category term="xiu" scheme="https://yuanfang.tech/categories/xiu/"/>
    
    
      <category term="xiu" scheme="https://yuanfang.tech/tags/xiu/"/>
    
  </entry>
  
  <entry>
    <title>zoj1586</title>
    <link href="https://yuanfang.tech/2019/08/12/zoj1586.html"/>
    <id>https://yuanfang.tech/2019/08/12/zoj1586.html</id>
    <published>2019-08-12T08:55:07.000Z</published>
    <updated>2019-08-12T09:01:30.903Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p></p><p class="description"></p><br>zoj1586，最小生成树<p></p><a id="more"></a><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=1586" target="_blank" rel="noopener">http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=1586</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>t组数据</p><p>n个人</p><p>每个人的路由器的价格</p><p>每个人连线到其他人的价格</p><p>输出最少多少钱可以所有人联通</p><p>两个人联通的价格=a路由器价格+b路由器价格+两人连线的价格</p><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><p>存权值的时候加上两个人的路由器价格，然后跑一边prim就好</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0xfffffff</span>;</span><br><span class="line"><span class="keyword">int</span> e[<span class="number">1010</span>][<span class="number">1010</span>];</span><br><span class="line"><span class="keyword">int</span> lowcost[<span class="number">1010</span>];</span><br><span class="line"><span class="keyword">int</span> wifi[<span class="number">1010</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">prim</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">lowcost[i]=e[<span class="number">1</span>][i];</span><br><span class="line">&#125;</span><br><span class="line">lowcost[<span class="number">1</span>]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> j,min=inf,temp;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(lowcost[j]!=<span class="number">-1</span>&amp;&amp;lowcost[j]&lt;min)</span><br><span class="line">&#123;</span><br><span class="line">min=lowcost[j];</span><br><span class="line">temp=j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans=ans+lowcost[temp];</span><br><span class="line">lowcost[temp]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(e[temp][j]&lt;lowcost[j])</span><br><span class="line">&#123;</span><br><span class="line">lowcost[j]=e[temp][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"><span class="keyword">while</span>(t--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">int</span> a,b,c;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;wifi[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> d;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;d);</span><br><span class="line">e[i][j]=wifi[i]+wifi[j]+d;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,prim());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p class=&quot;description&quot;&gt;&lt;/p&gt;&lt;br&gt;zoj1586，最小生成树&lt;p&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="zoj" scheme="https://yuanfang.tech/categories/zoj/"/>
    
    
      <category term="kuangbin" scheme="https://yuanfang.tech/tags/kuangbin/"/>
    
      <category term="prim" scheme="https://yuanfang.tech/tags/prim/"/>
    
      <category term="zoj" scheme="https://yuanfang.tech/tags/zoj/"/>
    
  </entry>
  
  <entry>
    <title>poj2421</title>
    <link href="https://yuanfang.tech/2019/08/12/poj2421.html"/>
    <id>https://yuanfang.tech/2019/08/12/poj2421.html</id>
    <published>2019-08-12T08:14:39.000Z</published>
    <updated>2019-08-12T08:18:26.072Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p></p><p class="description"></p><br>poj2421,带条件的最小生成树<p></p><a id="more"></a><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="http://poj.org/problem?id=2421" target="_blank" rel="noopener">http://poj.org/problem?id=2421</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>n个村庄，接下来n行</p><p>告诉你到别的村庄的距离</p><p>然后m条路，表示a，b两个村庄已经是联通的了</p><p>问最少再修多长的路就可以把所有村庄联通</p><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><p>已经有路的村庄距离设为0即可</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0xfffffff</span>;</span><br><span class="line"><span class="keyword">int</span> e[<span class="number">110</span>][<span class="number">110</span>];</span><br><span class="line"><span class="keyword">int</span> lowcost[<span class="number">110</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">prim</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">lowcost[i]=e[<span class="number">1</span>][i];</span><br><span class="line">lowcost[<span class="number">1</span>]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> j,min=inf,temp;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(lowcost[j]!=<span class="number">-1</span>&amp;&amp;lowcost[j]&lt;min)</span><br><span class="line">&#123;</span><br><span class="line">min=lowcost[j];</span><br><span class="line">temp=j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans=ans+lowcost[temp];</span><br><span class="line">lowcost[temp]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(e[temp][j]&lt;lowcost[j])</span><br><span class="line">&#123;</span><br><span class="line">lowcost[j]=e[temp][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">int</span> a,b,c;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;e[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line">e[a][b]=<span class="number">0</span>;</span><br><span class="line">e[b][a]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,prim());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p class=&quot;description&quot;&gt;&lt;/p&gt;&lt;br&gt;poj2421,带条件的最小生成树&lt;p&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="poj" scheme="https://yuanfang.tech/categories/poj/"/>
    
    
      <category term="kuangbin" scheme="https://yuanfang.tech/tags/kuangbin/"/>
    
      <category term="poj" scheme="https://yuanfang.tech/tags/poj/"/>
    
      <category term="prim" scheme="https://yuanfang.tech/tags/prim/"/>
    
  </entry>
  
  <entry>
    <title>poj2031</title>
    <link href="https://yuanfang.tech/2019/08/12/poj2031.html"/>
    <id>https://yuanfang.tech/2019/08/12/poj2031.html</id>
    <published>2019-08-12T07:50:08.000Z</published>
    <updated>2019-08-12T07:54:43.990Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p></p><p class="description"></p><br>poj2031,三维坐标+最小生成树<p></p><a id="more"></a><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="http://poj.org/problem?id=2031" target="_blank" rel="noopener">http://poj.org/problem?id=2031</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>在一个三维坐标系上又n个球体</p><p>告诉你他们的x，y，z坐标和他们的半径</p><p>求他们距离的最小生成树</p><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><p>两个球可能会有相交的地方（dis&lt;=0）</p><p>所以就给相交的球距离置0</p><p>lowcost数组就把加入树中的点标记为-1</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0xfffffff</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">piont</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">double</span> x,y,z,r;</span><br><span class="line">&#125;e[<span class="number">110</span>];</span><br><span class="line"><span class="keyword">double</span> <span class="built_in">map</span>[<span class="number">110</span>][<span class="number">110</span>];</span><br><span class="line"><span class="keyword">double</span> lowcost[<span class="number">110</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">prim</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">double</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">lowcost[i]=<span class="built_in">map</span>[<span class="number">1</span>][i];</span><br><span class="line">lowcost[<span class="number">1</span>]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//int d;</span></span><br><span class="line"><span class="comment">//for(d=1;d&lt;=n;d++)</span></span><br><span class="line"><span class="comment">//printf("%lf   ",lowcost[d]);</span></span><br><span class="line"><span class="comment">//printf("\n"); </span></span><br><span class="line"><span class="keyword">int</span> j,temp;</span><br><span class="line"><span class="keyword">double</span> min=inf;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(lowcost[j]!=<span class="number">-1</span>&amp;&amp;lowcost[j]&lt;min)</span><br><span class="line">&#123;</span><br><span class="line">min=lowcost[j];</span><br><span class="line">temp=j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans=ans+lowcost[temp];</span><br><span class="line">lowcost[temp]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">map</span>[temp][j]&lt;lowcost[j])</span><br><span class="line">&#123;</span><br><span class="line">lowcost[j]=<span class="built_in">map</span>[temp][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">double</span> a,b,c,d;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lf%lf%lf%lf"</span>,&amp;a,&amp;b,&amp;c,&amp;d);</span><br><span class="line">e[i].x=a;</span><br><span class="line">e[i].y=b;</span><br><span class="line">e[i].z=c;</span><br><span class="line">e[i].r=d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;=n;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">map</span>[i][j]=inf;</span><br><span class="line"><span class="keyword">if</span>(i==j)<span class="built_in">map</span>[i][j]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">double</span> dis=<span class="built_in">sqrt</span>((e[i].x-e[j].x)*(e[i].x-e[j].x)+(e[i].y-e[j].y)*(e[i].y-e[j].y)+(e[i].z-e[j].z)*(e[i].z-e[j].z));</span><br><span class="line"><span class="comment">//printf("%lf  %lf  %d %d\n",e[i].r,e[j].r,i,j);</span></span><br><span class="line">dis=dis-e[i].r-e[j].r;</span><br><span class="line"><span class="keyword">if</span>(dis&lt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">map</span>[i][j]=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">map</span>[j][i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">map</span>[i][j]=dis;</span><br><span class="line"><span class="built_in">map</span>[j][i]=dis;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.3lf\n"</span>,prim());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p class=&quot;description&quot;&gt;&lt;/p&gt;&lt;br&gt;poj2031,三维坐标+最小生成树&lt;p&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="poj" scheme="https://yuanfang.tech/categories/poj/"/>
    
    
      <category term="kuangbin" scheme="https://yuanfang.tech/tags/kuangbin/"/>
    
      <category term="poj" scheme="https://yuanfang.tech/tags/poj/"/>
    
      <category term="prim" scheme="https://yuanfang.tech/tags/prim/"/>
    
  </entry>
  
  <entry>
    <title>poj1287</title>
    <link href="https://yuanfang.tech/2019/08/12/poj1287.html"/>
    <id>https://yuanfang.tech/2019/08/12/poj1287.html</id>
    <published>2019-08-12T07:14:10.000Z</published>
    <updated>2019-08-12T07:16:05.322Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p></p><p class="description"></p><br>poj1287，最小生成树模板题<p></p><a id="more"></a><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="http://poj.org/problem?id=1287" target="_blank" rel="noopener">http://poj.org/problem?id=1287</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>n个点m条边</p><p>m行a到b的距离</p><p>求最小生成树大小</p><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><p>= =水</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0xfffffff</span>;</span><br><span class="line"><span class="keyword">int</span> e[<span class="number">60</span>][<span class="number">60</span>];</span><br><span class="line"><span class="keyword">int</span> lowcost[<span class="number">60</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">prim</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">lowcost[i]=e[<span class="number">1</span>][i];</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> j,min=inf,temp;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(lowcost[j]!=<span class="number">0</span>&amp;&amp;lowcost[j]&lt;min)</span><br><span class="line">&#123;</span><br><span class="line">min=lowcost[j];</span><br><span class="line">temp=j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans=ans+lowcost[temp];</span><br><span class="line">lowcost[temp]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(e[temp][j]&lt;lowcost[j])</span><br><span class="line">&#123;</span><br><span class="line">lowcost[j]=e[temp][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;=n;j++)</span><br><span class="line">&#123;</span><br><span class="line">e[i][j]=inf;</span><br><span class="line"><span class="keyword">if</span>(i==j)e[i][j]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> a,b,c;</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line"><span class="keyword">if</span>(c&lt;e[a][b])</span><br><span class="line">&#123;</span><br><span class="line">e[a][b]=c;</span><br><span class="line">e[b][a]=c;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,prim());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p class=&quot;description&quot;&gt;&lt;/p&gt;&lt;br&gt;poj1287，最小生成树模板题&lt;p&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="poj" scheme="https://yuanfang.tech/categories/poj/"/>
    
    
      <category term="kuangbin" scheme="https://yuanfang.tech/tags/kuangbin/"/>
    
      <category term="poj" scheme="https://yuanfang.tech/tags/poj/"/>
    
      <category term="prim" scheme="https://yuanfang.tech/tags/prim/"/>
    
  </entry>
  
  <entry>
    <title>poj1251</title>
    <link href="https://yuanfang.tech/2019/08/11/poj1251.html"/>
    <id>https://yuanfang.tech/2019/08/11/poj1251.html</id>
    <published>2019-08-11T11:41:44.000Z</published>
    <updated>2019-08-11T11:47:10.764Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p></p><p class="description"></p><br>poj1251,最小生成树，prim，剧毒输入<p></p><a id="more"></a><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="http://poj.org/problem?id=1251" target="_blank" rel="noopener">http://poj.org/problem?id=1251</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>首先给你一个图，需要你求出最小生成树，输入N个节点，用大写字母表示了节点，然后节点与节点之间有权值。<br>比如有9个节点，然后接下来有n-1行表示了边的情况，拿第一行举例<br>A 2 B 12 I 25<br>表示A有两个邻点，B和I，AB权值是12，AI权值是25</p><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><p>poj的奇妙评测机，也可能是数据有毒，scanf会tle</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">27</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0xfffffff</span>;</span><br><span class="line"><span class="keyword">int</span> e[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prim</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> min,i,j,k;</span><br><span class="line"><span class="keyword">int</span> lowcost[maxn];</span><br><span class="line"><span class="keyword">int</span> adj[maxn];</span><br><span class="line">lowcost[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">adj[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">lowcost[i]=e[<span class="number">1</span>][i];</span><br><span class="line">adj[i]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//int d;</span></span><br><span class="line"><span class="comment">//for(d=1;d&lt;=n;d++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//printf("%d %d  ",d,lowcost[d]);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//printf("\n");</span></span><br><span class="line">min=inf;</span><br><span class="line">j=<span class="number">1</span>;k=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line"><span class="keyword">if</span>(lowcost[j]!=<span class="number">0</span>&amp;&amp;lowcost[j]&lt;min)</span><br><span class="line">&#123;</span><br><span class="line">min=lowcost[j];</span><br><span class="line">k=j;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//printf("(%d, %d)\n",adj[k], k);</span></span><br><span class="line">ans=ans+lowcost[k];</span><br><span class="line">lowcost[k]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(lowcost[j]!=<span class="number">0</span>&amp;&amp;e[k][j]&lt;lowcost[j])</span><br><span class="line">&#123;</span><br><span class="line">lowcost[j]=e[k][j];</span><br><span class="line">adj[j]=k;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> u;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n,n)</span><br><span class="line">&#123;</span><br><span class="line">ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">27</span>;i++)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">27</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line">e[i][j]=inf;</span><br><span class="line"><span class="keyword">if</span>(i==j)e[i][j]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;u;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line"><span class="keyword">char</span> v;</span><br><span class="line"><span class="keyword">int</span> w;</span><br><span class="line"><span class="keyword">while</span>(t--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;v;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;w;</span><br><span class="line"><span class="keyword">if</span>(w&lt;e[u-<span class="string">'A'</span>+<span class="number">1</span>][v-<span class="string">'A'</span>+<span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">e[u-<span class="string">'A'</span>+<span class="number">1</span>][v-<span class="string">'A'</span>+<span class="number">1</span>]=w;e[v-<span class="string">'A'</span>+<span class="number">1</span>][u-<span class="string">'A'</span>+<span class="number">1</span>]=w;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">prim();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p class=&quot;description&quot;&gt;&lt;/p&gt;&lt;br&gt;poj1251,最小生成树，prim，剧毒输入&lt;p&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="poj" scheme="https://yuanfang.tech/categories/poj/"/>
    
    
      <category term="kuangbin" scheme="https://yuanfang.tech/tags/kuangbin/"/>
    
      <category term="poj" scheme="https://yuanfang.tech/tags/poj/"/>
    
      <category term="prim" scheme="https://yuanfang.tech/tags/prim/"/>
    
  </entry>
  
  <entry>
    <title>poj1135</title>
    <link href="https://yuanfang.tech/2019/08/10/poj1135.html"/>
    <id>https://yuanfang.tech/2019/08/10/poj1135.html</id>
    <published>2019-08-10T10:37:36.000Z</published>
    <updated>2019-08-10T10:58:32.430Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p></p><p class="description"></p><br>poj1135,比较有意思的最短路<p></p><a id="more"></a><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="http://poj.org/problem?id=1135" target="_blank" rel="noopener">http://poj.org/problem?id=1135</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>多米诺骨牌游戏。</p><p>计算最后倒下的是哪一张多米诺骨牌，在什么时间倒下。</p><p>多米诺骨牌包含一些关键牌，他们之间由一些普通骨牌来进行连接。</p><p>当一张关键牌倒下时，连接这张关键牌的所有行都开始倒下。</p><p>当倒下的行达到其他还没有倒下的关键牌时，则这些关键牌也开始倒下，同样连接它的所有行开始倒下。每一行骨牌可以从两个端点中任何一张关键牌开始倒下，甚至两个端点的关键牌可以分别倒下，在这种情形下，该行最后倒下的骨牌为中间的某张骨牌。</p><p>假定骨牌倒下的速度一致。</p><p>输入第一行n，m，表示n张骨牌，共有m行骨牌</p><p>接下来m行是a关键牌倒向b关键牌所需要的时间。</p><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><p>关键牌抽象成点，关键牌之间抽象为边。时间为权值。</p><p>1、计算每一张关键牌倒下的time[i]，然后去time[]的最大值，设为maxtime1；</p><p>2、计算每一行完全倒下的时间。设每一行的两端的关键牌为i和j，则这一行完全倒下的时间为</p><p>(time[i]+time[j]+e[i] [j])/2.0。取所有行完全倒下时间的最大值，设为maxtime2；</p><p>3、如果maxtime2&gt;maxtime1，则是第二种情形（即最后倒下的骨牌位于两张关键牌之间），否则是第一种情形。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">510</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0xffffff</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,k;</span><br><span class="line"><span class="keyword">int</span> dis[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> e[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="literal">false</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i==j)e[i][j]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> e[i][j]=inf;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijstra</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,v;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">dis[i]=e[x][i];</span><br><span class="line">&#125;</span><br><span class="line">dis[x]=<span class="number">0</span>;</span><br><span class="line">vis[x]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> min=inf;</span><br><span class="line"><span class="keyword">int</span> temp;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[j]==<span class="number">0</span> &amp;&amp; dis[j]&lt;min)</span><br><span class="line">&#123;</span><br><span class="line">min=dis[j];</span><br><span class="line">temp=j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">vis[temp]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(v=<span class="number">1</span>;v&lt;=n;v++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(e[temp][v]&lt;inf)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dis[temp]+e[temp][v]&lt;dis[v])</span><br><span class="line">dis[v]=dis[temp]+e[temp][v];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> kase=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m)!=EOF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">0</span>&amp;&amp;m==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">int</span> a,b,c;</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line">e[a][b]=c;</span><br><span class="line">e[b][a]=c;</span><br><span class="line">&#125;</span><br><span class="line">dijstra(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">double</span> mtime1,mtime2;</span><br><span class="line"><span class="keyword">double</span> max=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> i,ans1i,j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dis[i]&gt;max)</span><br><span class="line">&#123;</span><br><span class="line">max=dis[i];</span><br><span class="line">ans1i=i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">mtime1=max;</span><br><span class="line">max=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> ansi,ansj;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">double</span> k;</span><br><span class="line"><span class="keyword">if</span>(e[i][j]&lt;inf)</span><br><span class="line">&#123;</span><br><span class="line">k=(dis[i]+dis[j]+e[i][j])/<span class="number">2.0</span>;</span><br><span class="line"><span class="keyword">if</span>(k&gt;max)</span><br><span class="line">&#123;</span><br><span class="line">max=k;</span><br><span class="line">ansi=i;</span><br><span class="line">ansj=j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">mtime2=max;</span><br><span class="line"><span class="keyword">if</span>(ansi&gt;ansj)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> temp;</span><br><span class="line">temp=ansi;</span><br><span class="line">ansi=ansj;</span><br><span class="line">ansj=temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"System #%d\n"</span>,++kase);</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>&amp;&amp;m==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"The last domino falls after 0.0 seconds, at key domino 1.\n\n"</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(mtime1&gt;=mtime2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"The last domino falls after %.1f seconds, at key domino %d.\n\n"</span>,mtime1,ans1i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"The last domino falls after %.1f seconds, between key dominoes %d and %d.\n\n"</span>,mtime2,ansi,ansj);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p class=&quot;description&quot;&gt;&lt;/p&gt;&lt;br&gt;poj1135,比较有意思的最短路&lt;p&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="poj" scheme="https://yuanfang.tech/categories/poj/"/>
    
    
      <category term="dijstra" scheme="https://yuanfang.tech/tags/dijstra/"/>
    
      <category term="poj" scheme="https://yuanfang.tech/tags/poj/"/>
    
  </entry>
  
  <entry>
    <title>hdu3038</title>
    <link href="https://yuanfang.tech/2019/08/10/hdu3038.html"/>
    <id>https://yuanfang.tech/2019/08/10/hdu3038.html</id>
    <published>2019-08-10T08:38:18.000Z</published>
    <updated>2019-08-10T08:43:36.007Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p></p><p class="description"></p><br>hdu3038,加权并查集，需要理解<p></p><a id="more"></a><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3038" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=3038</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>求在有n个数中，有m次询问，每次询问在这给定的区间和这区间里数的和为s，求每次给出的是不是正确的和s。也就是和前面的矛盾不矛盾。</p><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><p>用一个sum[]来记录当前端点到父亲节点的距离。</p><p>若输入的a，b的父亲节点相同时，进行判断。</p><p>否则更新父亲节点，同时更新点的sum[]。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 200010</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> sum[maxn],pr[maxn];<span class="comment">//pr存父亲节点，sum存父亲节点到当前节点的距离 </span></span><br><span class="line"><span class="keyword">int</span> n,m,ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">pr[i]=i;</span><br><span class="line">sum[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">ans=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x==pr[x])<span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> k=pr[x];</span><br><span class="line">pr[x]=find(pr[x]);</span><br><span class="line">sum[x]=sum[x]+sum[k];</span><br><span class="line"><span class="keyword">return</span> pr[x];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">to_union</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line">x=find(a);</span><br><span class="line">y=find(b);</span><br><span class="line"><span class="keyword">if</span>(x==y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(sum[a]+c!=sum[b])</span><br><span class="line">&#123;</span><br><span class="line">ans++;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(x&lt;y)</span><br><span class="line">&#123;</span><br><span class="line">pr[y]=x;</span><br><span class="line">sum[y]=sum[a]+c-sum[b];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">pr[x]=y;</span><br><span class="line">sum[x]=sum[b]-sum[a]-c;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m)!=EOF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a,b,c;</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line">to_union(a<span class="number">-1</span>,b,c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p class=&quot;description&quot;&gt;&lt;/p&gt;&lt;br&gt;hdu3038,加权并查集，需要理解&lt;p&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="hdu" scheme="https://yuanfang.tech/categories/hdu/"/>
    
    
      <category term="并查集" scheme="https://yuanfang.tech/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
      <category term="hdu" scheme="https://yuanfang.tech/tags/hdu/"/>
    
      <category term="kuangbin" scheme="https://yuanfang.tech/tags/kuangbin/"/>
    
  </entry>
  
  <entry>
    <title>hdu1213</title>
    <link href="https://yuanfang.tech/2019/08/09/hdu1213.html"/>
    <id>https://yuanfang.tech/2019/08/09/hdu1213.html</id>
    <published>2019-08-09T06:21:56.000Z</published>
    <updated>2019-08-09T16:55:09.903Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p></p><p class="description"></p><br>hdu1213，并查集水题<p></p><a id="more"></a><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1213" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=1213</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>输入t组，n个人，m组关系。</p><p>a认识b，b认识c，那么a也等于认识c。</p><p>认识的人可以坐一张桌子上，求最少要多少张桌子。</p><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><p>假设一开始有n张桌子，每有一个人并到集合中去，就减少一张桌子</p><p>代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; parent;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> max_size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 初始化每一个元素的根节点都为自身</span></span><br><span class="line">parent.clear();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;=max_size; ++i)</span><br><span class="line">parent.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> parent[x] == x ? x : find(parent[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">to_union</span><span class="params">(<span class="keyword">int</span> x1, <span class="keyword">int</span> x2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">parent[find(x1)] = find(x2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t,n,m,i,a,b;</span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">1010</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"><span class="keyword">while</span>(t--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">init(n);</span><br><span class="line"><span class="keyword">int</span> ans=n;</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(find(a)!=find(b))</span><br><span class="line">&#123;</span><br><span class="line">ans--;</span><br><span class="line">to_union(a,b);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p class=&quot;description&quot;&gt;&lt;/p&gt;&lt;br&gt;hdu1213，并查集水题&lt;p&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="hdu" scheme="https://yuanfang.tech/categories/hdu/"/>
    
    
      <category term="并查集" scheme="https://yuanfang.tech/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
      <category term="hdu" scheme="https://yuanfang.tech/tags/hdu/"/>
    
      <category term="kuangbin" scheme="https://yuanfang.tech/tags/kuangbin/"/>
    
  </entry>
  
  <entry>
    <title>七夕</title>
    <link href="https://yuanfang.tech/2019/08/07/%E4%B8%83%E5%A4%95.html"/>
    <id>https://yuanfang.tech/2019/08/07/七夕.html</id>
    <published>2019-08-07T11:53:15.000Z</published>
    <updated>2019-08-10T05:35:35.033Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p></p><p class="description"></p><br>一看居然七夕了。<p></p><p><img src="http://pv35325dx.bkt.clouddn.com/56884409_p0.jpg" alt></p><a id="more"></a><p>我是对这个节日不怎么感冒的。</p><p>当然，我相信爱情，而且是很单纯的那种。我相信美好的爱情。</p><p>我甚至有时候感觉我自己长情到可怕。一个名字刻在心里十几年，我才活了多少岁。只是随着时间时间流逝，多年未见，已经与她没有任何交集了。我甚至开始怀疑，也许那只是我还小，不懂得爱慕和喜欢的区别。</p><p>我也觉得我不适合爱人。我懂啥，我啥也不懂。我能给予什么，我什么也给不了。我甚至为未来而迷茫。</p><p>爱乐之城真的很棒，梦想会一直伴随着你，爱人也许不会。</p><p>所以我觉得更应该去努力提升自己。</p><p>今天又是wrong answer了一个下午，日常自闭。但我很满足，很充实，我能感受到我在做有意义的事情。</p><p>就算是平庸如我，渺小如我，世间辽阔，也只一个。</p><p>这心头热火，唇间冰河，悉数无关我。</p><p>词不达意。</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p class=&quot;description&quot;&gt;&lt;/p&gt;&lt;br&gt;一看居然七夕了。&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://pv35325dx.bkt.clouddn.com/56884409_p0.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="somethings" scheme="https://yuanfang.tech/categories/somethings/"/>
    
    
  </entry>
  
  <entry>
    <title>poj1611</title>
    <link href="https://yuanfang.tech/2019/08/07/poj1611.html"/>
    <id>https://yuanfang.tech/2019/08/07/poj1611.html</id>
    <published>2019-08-07T11:29:50.000Z</published>
    <updated>2019-08-07T11:34:13.801Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p></p><p class="description"></p><br>poj1611,并查集水题<p></p><a id="more"></a><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="http://poj.org/problem?id=1611" target="_blank" rel="noopener">http://poj.org/problem?id=1611</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>0号学生得了流感，跟他一组的就会受到感染，间接的也会。</p><p>第一行告诉你有n个学生，m组。</p><p>接下来m行告诉你每组有t个人，接下来是t个人的编号。</p><p>输出有多少个学生被感染了。</p><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><p>水水水。。。每组跟第一个人to_union一下就好。</p><p>最后查一下跟0号parent一样的就ans++</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 30010</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> parent[maxn];</span><br><span class="line"><span class="keyword">int</span> rank[maxn];</span><br><span class="line"><span class="keyword">int</span> sets[maxn];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x == parent[x] ? x : (parent[x] = find(parent[x]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">to_union</span><span class="params">(<span class="keyword">int</span> x1, <span class="keyword">int</span> x2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> f1 = find(x1);</span><br><span class="line"><span class="keyword">int</span> f2 = find(x2);</span><br><span class="line"><span class="keyword">if</span> (rank[f1] &gt; rank[f2])</span><br><span class="line">parent[f2] = f1;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            parent[f1] = f2;</span><br><span class="line">            <span class="keyword">if</span> (rank[f1] == rank[f2])</span><br><span class="line">                ++rank[f2];</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">parent[i]=i;</span><br><span class="line">rank[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">0</span>&amp;&amp;m==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;t;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;sets[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;t;i++)</span><br><span class="line">&#123;</span><br><span class="line">to_union(sets[<span class="number">0</span>],sets[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(find(i)==find(<span class="number">0</span>))ans++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p class=&quot;description&quot;&gt;&lt;/p&gt;&lt;br&gt;poj1611,并查集水题&lt;p&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="poj" scheme="https://yuanfang.tech/categories/poj/"/>
    
    
      <category term="并查集" scheme="https://yuanfang.tech/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
      <category term="kuangbin" scheme="https://yuanfang.tech/tags/kuangbin/"/>
    
      <category term="poj" scheme="https://yuanfang.tech/tags/poj/"/>
    
  </entry>
  
  <entry>
    <title>poj2236</title>
    <link href="https://yuanfang.tech/2019/08/04/poj2236.html"/>
    <id>https://yuanfang.tech/2019/08/04/poj2236.html</id>
    <published>2019-08-04T12:18:34.000Z</published>
    <updated>2019-08-05T11:48:09.749Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p></p><p class="description"></p><br>poj2236,并查集<p></p><p><strong>能用puts就别用printf！！！</strong></p><p>important！！<img src="http://pv35325dx.bkt.clouddn.com/%E5%BC%9F%E5%BC%9F.jpeg" alt></p><a id="more"></a><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="http://poj.org/problem?id=2236" target="_blank" rel="noopener">http://poj.org/problem?id=2236</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>有n台计算机, 已知每台计算机的坐标, 初始时所有计算机都是坏的, 然后修复其中一些计算机, 已修复的计算机距离不超过distance的可以联网(若a, b之间可以联网, b, c之间可以联网, 则a, c之间可以联网),询问x, y之间可否联网;</p><p>第一行输入n, distance, 表示有n台计算机, 联网的两台计算机距离不能超过distance;</p><p>接下来n分别表示n台计算机的坐标;</p><p>再接下来到输入结束, 输入格式为: O, x 的表示修复第x台计算机, 输入格式为S, x, y 的表示询问x, y之间能否联网, 若能输出 SUCCESS, 不能则输出 FAIL;</p><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><p>并查集，修好的机器就跟别的机器尝试连接一下，满足条件就放入一个集合</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>3032ms，看到有1000+ms就过了的，晚点看看人家是怎么做的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1010</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,d,k;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; parent;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; rank;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> max_size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 初始化每一个元素的根节点都为自身</span></span><br><span class="line">parent.clear();</span><br><span class="line">rank.clear();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;=max_size; ++i)</span><br><span class="line">&#123;</span><br><span class="line">parent.push_back(i);</span><br><span class="line">rank.push_back(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x == parent[x] ? x : (parent[x] = find(parent[x]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">to_union</span><span class="params">(<span class="keyword">int</span> x1, <span class="keyword">int</span> x2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> f1 = find(x1);</span><br><span class="line"><span class="keyword">int</span> f2 = find(x2);</span><br><span class="line"><span class="keyword">if</span> (rank[f1] &gt; rank[f2])</span><br><span class="line">parent[f2] = f1;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            parent[f1] = f2;</span><br><span class="line">            <span class="keyword">if</span> (rank[f1] == rank[f2])</span><br><span class="line">                ++rank[f2];</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_same</span><span class="params">(<span class="keyword">int</span> e1, <span class="keyword">int</span> e2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> find(e1) == find(e2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,y,vis;</span><br><span class="line">&#125;po[maxn]; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dis</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">sqrt</span>((po[a].x-po[b].x)*(po[a].x-po[b].x)+(po[a].y-po[b].y)*(po[a].y-po[b].y));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;d);</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;po[i].x,&amp;po[i].y);</span><br><span class="line">po[i].vis=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">getchar();</span><br><span class="line">init(n);</span><br><span class="line"><span class="keyword">char</span> x;</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%c"</span>,&amp;x)!=EOF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(x==<span class="string">'O'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);</span><br><span class="line">po[k].vis=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(po[i].vis==<span class="number">1</span>&amp;&amp;i!=k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dis(k,i)&lt;=d&amp;&amp;(!is_same(k,i)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//printf("%d%d\n",k,i);</span></span><br><span class="line">to_union(k,i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line"><span class="keyword">if</span>(is_same(a,b))<span class="built_in">printf</span>(<span class="string">"SUCCESS\n"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"FAIL\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">getchar();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="更新（心累的故事）"><a href="#更新（心累的故事）" class="headerlink" title="更新（心累的故事）"></a>更新（心累的故事）</h2><p><img src="poj2236\1564991288139.png" alt="1564991288139"></p><p>考虑了很久。。代码越来越长耗时越来越多。。（负优化实锤了）</p><p>怎么想都感觉没啥更快的方法了。</p><p>我又看了眼那个老哥：<img src="poj2236\1565003068075.png" alt></p><p><img src="poj2236\TIM图片20190805190547.jpg" alt="TIM图片20190805190547">嗯？？？？</p><p>那我拿你的代码交交看。</p><p><img src="poj2236\1565003423379.png" alt="1565003423379"></p><p><img src="poj2236\TIM图片20190805190547.jpg" alt="TIM图片20190805190547">嗯？？？？！</p><p>唉。。。</p><p>然后看了看通过这题的人，确实是有1s左右过的，然后我就继续开始思考。</p><p>有哪里不对。</p><p>网上找了找别人的代码，交了几份，找到了一份932ms的。厉害啊老哥！</p><p>代码风格跟我差不多，很棒，我一下子就读懂了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">coordinate</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">&#125;a[<span class="number">1010</span>];</span><br><span class="line"><span class="keyword">int</span> n,d;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;father;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;visit;</span><br><span class="line"><span class="comment">//int father[1010];</span></span><br><span class="line"><span class="comment">//int visit[1010];</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_it</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tempx=x,t;</span><br><span class="line">    <span class="keyword">while</span>(tempx!=father[tempx])</span><br><span class="line">        tempx=father[tempx];</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">while</span>(x!=father[x])</span><br><span class="line">    &#123;</span><br><span class="line">        t=father[x];</span><br><span class="line">        father[x]=tempx;</span><br><span class="line">        x=t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tempx;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> p1,<span class="keyword">int</span> p2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(d*d&gt;=((a[p1].x-a[p2].x)*(a[p1].x-a[p2].x)+(a[p1].y-a[p2].y)*(a[p1].y-a[p2].y)))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unin</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tx=find_it(x);</span><br><span class="line">    <span class="keyword">int</span> ty=find_it(y);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(tx!=ty&amp;&amp;calc(x,y))</span><br><span class="line">        father[tx]=ty;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;d);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a[i].x,&amp;a[i].y);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">father.push_back(i);</span><br><span class="line">visit.push_back(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">char</span> ch[<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">int</span> t1,t2;</span><br><span class="line">    <span class="keyword">int</span> flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%s"</span>,ch)!=EOF)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch[<span class="number">0</span>]==<span class="string">'O'</span>)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t1);</span><br><span class="line">            visit[t1]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(flag)</span><br><span class="line">                flag=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">                    <span class="keyword">if</span>(visit[i]&amp;&amp;i!=t1)</span><br><span class="line">                        unin(t1,i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;t1,&amp;t2);</span><br><span class="line">            <span class="keyword">int</span> temp1=find_it(t1);</span><br><span class="line">            <span class="keyword">int</span> temp2=find_it(t2);</span><br><span class="line">            <span class="keyword">if</span>(temp1==temp2)</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">"SUCCESS"</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">"FAIL"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>emmm这代码跟我写的思路有啥区别？？？我俩写的不是一毛一样？！</p><p>怀疑是我用了STL的问题，于是将他的数组改成了vector。</p><p>他，900+，我3000+。</p><p><img src="poj2236/TIM%E5%9B%BE%E7%89%8720190805191700.gif" alt>why？？？？？</p><p>然后就是漫长的找不同时间。</p><p>最恐怖的就是我把他的函数copy过来替换了我的函数，我还是3000+。</p><p>居然是主函数里面的问题？</p><p>最后锁定目标，换成注释里面的就变900+了。</p><p>竟然是puts和printf的问题。。</p><p><img src="poj2236\TIM图片20190805190547-1565004175371.jpg" alt="TIM图片20190805190547">这能差3倍的速度？？我懂了，以后能puts我就puts了。</p><p>end.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;t1,&amp;t2);</span><br><span class="line"><span class="keyword">int</span> temp1,temp2;</span><br><span class="line">temp1=find(t1);</span><br><span class="line">temp2=find(t2); </span><br><span class="line"><span class="keyword">if</span>(temp1==temp2)<span class="built_in">printf</span>(<span class="string">"SUCCESS\n"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"FAIL\n"</span>);</span><br><span class="line"><span class="comment">//            scanf("%d%d",&amp;t1,&amp;t2);</span></span><br><span class="line"><span class="comment">//            int temp1=find(t1);</span></span><br><span class="line"><span class="comment">//            int temp2=find(t2);</span></span><br><span class="line"><span class="comment">//            if(temp1==temp2)</span></span><br><span class="line"><span class="comment">//                puts("SUCCESS");</span></span><br><span class="line"><span class="comment">//            else</span></span><br><span class="line"><span class="comment">//                puts("FAIL");</span></span><br></pre></td></tr></table></figure><p>最后是通过的代码，954ms</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1010</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,d,k;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; parent;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; rank;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;=n; ++i)</span><br><span class="line">&#123;</span><br><span class="line">parent.push_back(i);</span><br><span class="line">rank.push_back(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x == parent[x] ? x : (parent[x] = find(parent[x]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">to_union</span><span class="params">(<span class="keyword">int</span> x1, <span class="keyword">int</span> x2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> f1 = find(x1);</span><br><span class="line"><span class="keyword">int</span> f2 = find(x2);</span><br><span class="line"><span class="keyword">if</span> (rank[f1] &gt; rank[f2])</span><br><span class="line">parent[f2] = f1;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            parent[f1] = f2;</span><br><span class="line">            <span class="keyword">if</span> (rank[f1] == rank[f2])</span><br><span class="line">                ++rank[f2];</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,y,vis;</span><br><span class="line">&#125;po[maxn]; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dis</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(d*d&gt;=((po[a].x-po[b].x)*(po[a].x-po[b].x)+(po[a].y-po[b].y)*(po[a].y-po[b].y)))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;d);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;po[i].x,&amp;po[i].y);</span><br><span class="line">        po[i].vis=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">init();</span><br><span class="line">    <span class="keyword">char</span> ch[<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">int</span> t1,t2;</span><br><span class="line">    <span class="keyword">int</span> flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%s"</span>,ch)!=EOF)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch[<span class="number">0</span>]==<span class="string">'O'</span>)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t1);</span><br><span class="line">            po[t1].vis=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(flag)</span><br><span class="line">                flag=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">                    <span class="keyword">if</span>(po[i].vis&amp;&amp;i!=t1)</span><br><span class="line">                    &#123;</span><br><span class="line">                    <span class="keyword">if</span>(dis(t1,i))to_union(t1,i);</span><br><span class="line">&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;t1,&amp;t2);</span><br><span class="line"><span class="keyword">if</span>(find(t1)==find(t2))<span class="built_in">puts</span>(<span class="string">"SUCCESS"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"FAIL"</span>);</span><br><span class="line"><span class="comment">//            scanf("%d%d",&amp;t1,&amp;t2);</span></span><br><span class="line"><span class="comment">//            int temp1=find(t1);</span></span><br><span class="line"><span class="comment">//            int temp2=find(t2);</span></span><br><span class="line"><span class="comment">//            if(temp1==temp2)</span></span><br><span class="line"><span class="comment">//                puts("SUCCESS");</span></span><br><span class="line"><span class="comment">//            else</span></span><br><span class="line"><span class="comment">//                puts("FAIL");</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p class=&quot;description&quot;&gt;&lt;/p&gt;&lt;br&gt;poj2236,并查集&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;能用puts就别用printf！！！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;important！！&lt;img src=&quot;http://pv35325dx.bkt.clouddn.com/%E5%BC%9F%E5%BC%9F.jpeg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="poj" scheme="https://yuanfang.tech/categories/poj/"/>
    
    
      <category term="并查集" scheme="https://yuanfang.tech/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
      <category term="kuangbin" scheme="https://yuanfang.tech/tags/kuangbin/"/>
    
      <category term="poj" scheme="https://yuanfang.tech/tags/poj/"/>
    
  </entry>
  
  <entry>
    <title>hdu1232</title>
    <link href="https://yuanfang.tech/2019/08/04/hdu1232.html"/>
    <id>https://yuanfang.tech/2019/08/04/hdu1232.html</id>
    <published>2019-08-04T09:28:27.000Z</published>
    <updated>2019-08-04T09:33:28.035Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p></p><p class="description"></p><br>hdu1232,并查集板子题<p></p><a id="more"></a><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1232" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=1232</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>n个城镇，m条路</p><p>提问最少再修多少条路，可以让所有城镇联通</p><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><p>并查集模板题，最后城镇的集合数-1就是ans</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; parent;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> max_size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 初始化每一个元素的根节点都为自身</span></span><br><span class="line">parent.clear();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;=max_size; ++i)</span><br><span class="line">parent.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> parent[x] == x ? x : find(parent[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">to_union</span><span class="params">(<span class="keyword">int</span> x1, <span class="keyword">int</span> x2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">parent[find(x1)] = find(x2);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 判断两个元素是否属于同一个集合</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_same</span><span class="params">(<span class="keyword">int</span> e1, <span class="keyword">int</span> e2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> find(e1) == find(e2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">init(n);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line">to_union(a,b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> i,sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(find(i)==i)sum++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p class=&quot;description&quot;&gt;&lt;/p&gt;&lt;br&gt;hdu1232,并查集板子题&lt;p&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="hdu" scheme="https://yuanfang.tech/categories/hdu/"/>
    
    
      <category term="并查集" scheme="https://yuanfang.tech/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
      <category term="hdu" scheme="https://yuanfang.tech/tags/hdu/"/>
    
      <category term="kuangbin" scheme="https://yuanfang.tech/tags/kuangbin/"/>
    
  </entry>
  
  <entry>
    <title>并查集</title>
    <link href="https://yuanfang.tech/2019/08/04/%E5%B9%B6%E6%9F%A5%E9%9B%86.html"/>
    <id>https://yuanfang.tech/2019/08/04/并查集.html</id>
    <published>2019-08-04T08:41:59.000Z</published>
    <updated>2019-08-05T11:30:54.114Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p></p><p class="description"></p><p></p><h2 id="并查集（Disjoint-set）"><a href="#并查集（Disjoint-set）" class="headerlink" title="并查集（Disjoint-set）"></a>并查集（Disjoint-set）</h2><p>代码简洁，功能强大。</p><a id="more"></a><h2 id="什么是并查集"><a href="#什么是并查集" class="headerlink" title="什么是并查集"></a>什么是并查集</h2><p>对于一个集合S={a1, a2, …, an-1, an}，我们还可以对集合S进一步划分: S1,S2,…,Sm-1,Sm，我们希望能够快速确定S中的两两元素是否属于S的同一子集。<br> 举个栗子，S={0,1,2,3,4,5,6}，如果我们按照一定的规则对集合S进行划分,假设划分后为S1={1,2,4}, S2={3,6}，S3={0,5}，任意给定两个元素，我们如何确定它们是否属于同一子集？某些合并子集后，又如何确定两两关系？基于此类问题便出现了并查集这种数据结构。<br> 并查集有两个基本操作：</p><ul><li>Find: 查找元素所属子集</li><li>Union：合并两个子集为一个新的集合</li></ul><h2 id="并查集的基本结构"><a href="#并查集的基本结构" class="headerlink" title="并查集的基本结构"></a>并查集的基本结构</h2><p>我们可以使用树这种数据结构来表示集合，不同的树就是不同的集合，并查集中包含了多棵树，表示并查集中不同的子集，树的集合是<strong>森林</strong>，所以并查集属于森林。<br>若集合S={0, 1, 2, 3, 4, 5, 6}，最初每一个元素都是一棵树。</p><p><img src="并查集\5970830-e240c2c558867f5f.webp" alt="img"></p><p>对于<code>Union</code>操作，我们只需要将两棵树合并，例如合并0、1、2得到S1={0, 1, 2},合并3和4得到S2={3, 4}</p><p><img src="并查集\5970830-6e9c9c2aa9ae025d.webp" alt="img"></p><p>对于<code>Find</code>操作，我们只需要返回该元素所在树的根节点。所以，如果我们想要比较判断1和2是否在一个集合，只需要通过Find(1)和Find(2)返回各自的根节点比较是否相等便可。已知树中的一个节点，找到其根节点的时间复杂度为<code>O(D)</code>，D为节点的深度。<br>我们可以使用数组来表示树，数组下标表示树的一个节点，该下表所对应的值表示树的父节点。例如<code>P[i]</code>表示元素<code>i</code>的父节点。对于图2中的集合，我们可以存储在下面的数组中（第二行为数组下标）</p><div class="table-container"><table><thead><tr><th style="text-align:center">0</th><th style="text-align:center">0</th><th style="text-align:center">0</th><th style="text-align:center">3</th><th style="text-align:center">3</th><th style="text-align:center">5</th><th style="text-align:center">6</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">3</td><td style="text-align:center">4</td><td style="text-align:center">5</td><td style="text-align:center">6</td></tr></tbody></table></div><p><strong>对于树的根节点，我们规定其元素值为其本身（即父节点为自己）。</strong></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>我们使用一个parent数组存储树，先实现未经优化的版本。<br>对于<code>Find</code>操作，代码非常简单</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> parent[x] == x ? x : find(parent[x]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该代码比较元素x的父节点parent[x]是否等于x自身，如果是便说明找到了根节点（根节点的父节点是自身），直接返回；否则，把x的父节点parent[x]传入find，直到找到根节点。<br>下面是<code>union</code>操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">to_union</span><span class="params">(<span class="keyword">int</span> x1, <span class="keyword">int</span> x2)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p1 = find(x1);</span><br><span class="line">    <span class="keyword">int</span> p2 = find(x2);</span><br><span class="line">    parent[p1] = p2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传入两个元素，分别找到根节点，使根节点p1的父节点为p2，即将p1为根节点的这棵树合并到p2为根节点的树上。<br>下面是完整代码：(hdu1232)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; parent;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> max_size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 初始化每一个元素的根节点都为自身</span></span><br><span class="line">parent.clear();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;=max_size; ++i)</span><br><span class="line">parent.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> parent[x] == x ? x : find(parent[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">to_union</span><span class="params">(<span class="keyword">int</span> x1, <span class="keyword">int</span> x2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">parent[find(x1)] = find(x2);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 判断两个元素是否属于同一个集合</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_same</span><span class="params">(<span class="keyword">int</span> e1, <span class="keyword">int</span> e2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> find(e1) == find(e2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">init(n);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line">to_union(a,b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> i,sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(find(i)==i)sum++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的实现，可以看出每一次Find操作的时间复杂度为<code>O(H)</code>，H为树的高度，由于我们没有对树做特殊处理，所以树的不断合并可能会使树严重不平衡，最坏情况每个节点都只有一个子节点，如下图3（第一个点为根节点）</p><p><img src="并查集\5970830-5e6d6e9f91b85c3b.webp" alt="img"></p><p>此时Find操作的时间复杂度为<code>O(n)</code>，这显然不是我们想要的。下面引入两个优化的方法。</p><p>优化</p><p>方法一</p><p>“按秩合并”。实际上就是在合并两棵树时，将高度较小的树合并到高度较大的树上。这里我们使用“秩”(rank)代替高度，秩表示高度的上界，通常情况我们令只有一个节点的树的秩为0，严格来说，rank + 1才是高度的上界；两棵秩分别为r1、r2的树合并，如果秩不相等，我们将秩小的树合并到秩大的树上，这样就能保证新树秩不大于原来的任意一棵树。如果r1与r2相等，两棵树任意合并，并令新树的秩为r1 + 1。</p><p>方法二</p><p>“路径压缩”。在执行Find的过程中，将路径上的所有节点都直接连接到根节点上。</p><p><img src="并查集\5970830-44d64a584dd736e2.webp" alt="img"></p><p>下面是采用”按秩合并”与“路径压缩”两中优化算法的实现。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; parent;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; rank;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> max_size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 初始化每一个元素的根节点都为自身</span></span><br><span class="line">parent.clear();</span><br><span class="line">rank.clear();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;=max_size; ++i)</span><br><span class="line">&#123;</span><br><span class="line">parent.push_back(i);</span><br><span class="line">rank.push_back(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x == parent[x] ? x : (parent[x] = find(parent[x]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">to_union</span><span class="params">(<span class="keyword">int</span> x1, <span class="keyword">int</span> x2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> f1 = find(x1);</span><br><span class="line"><span class="keyword">int</span> f2 = find(x2);</span><br><span class="line"><span class="keyword">if</span> (rank[f1] &gt; rank[f2])</span><br><span class="line">parent[f2] = f1;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            parent[f1] = f2;</span><br><span class="line">            <span class="keyword">if</span> (rank[f1] == rank[f2])</span><br><span class="line">                ++rank[f2];</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_same</span><span class="params">(<span class="keyword">int</span> e1, <span class="keyword">int</span> e2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> find(e1) == find(e2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">init(n);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line">to_union(a,b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> i,sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(find(i)==i)sum++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p class=&quot;description&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;h2 id=&quot;并查集（Disjoint-set）&quot;&gt;&lt;a href=&quot;#并查集（Disjoint-set）&quot; class=&quot;headerlink&quot; title=&quot;并查集（Disjoint-set）&quot;&gt;&lt;/a&gt;并查集（Disjoint-set）&lt;/h2&gt;&lt;p&gt;代码简洁，功能强大。&lt;/p&gt;
    
    </summary>
    
      <category term="algorithm" scheme="https://yuanfang.tech/categories/algorithm/"/>
    
    
      <category term="并查集" scheme="https://yuanfang.tech/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>Prim</title>
    <link href="https://yuanfang.tech/2019/08/04/Prim.html"/>
    <id>https://yuanfang.tech/2019/08/04/Prim.html</id>
    <published>2019-08-04T06:52:17.000Z</published>
    <updated>2019-08-10T16:03:18.955Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p></p><p class="description"></p><p></p><h2 id="Prim算法"><a href="#Prim算法" class="headerlink" title="Prim算法"></a>Prim算法</h2><p>最小生成树之Prim算法。</p><p><strong>最小生成树(Minimum Cost Spanning Tree)</strong> 即构造连通图的最小代价生成树</p><p>思想与dijstra差不多，因此复杂度也一样。</p><p>复杂度：O（N²）</p><p>堆优化：O（ElogN）</p><a id="more"></a><h2 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h2><p>对于图<code>G</code>而言，<code>V</code>是所有顶点的集合。现在设置两个新的集合<code>U</code>和<code>T</code>， 其中<code>U</code>用于存放<code>G</code>的最小生成树中的顶点，<code>T</code>存放<code>G</code>的最小生成树中的边。从所有<code>u∈U</code>,<code>v∈(V−U)</code>，（<code>V-U</code>表示除去<code>U</code>的所有顶点)的边中选取权值最小的边<code>(u, v)</code>， 将顶点<code>v</code>加入集合<code>U</code>中，将边<code>(u, v)</code>加入集合<code>T</code>中，如此不断重复，直到<code>U = V</code>为止，最小生成树构造完毕，这时集合<code>T</code>中包含了最小生成树的所有边。</p><h2 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h2><p><img src="Prim\20180528101859978.jfif" alt="img"></p><p>以上图<code>G4</code>为例，对<code>Prim</code>算法进行模拟演示（假定选择<code>A</code>顶点为起始点）</p><p><img src="Prim\20180528101912444.jfif" alt="Graph_prim_G4_details"></p><p><strong>初始状态</strong>： <code>V</code>是所有顶点集合，即V={A,B,C,D,E,F,G}</p><p><strong>第一步</strong>：<code>A</code>为起始点，将<code>A</code>加入到顶点集合<code>U</code>中</p><p>U={A},V−U={B,C,D,E,F,G}</p><p><strong>第二步</strong>：从<code>U</code>集合所有顶点的边集中，遍历到<code>(A, B)</code>的权值最小，故将<code>B</code>加入到顶点集合<code>U</code>中</p><p>U={A,B},V−U={C,D,E,F,G}</p><p><strong>第三步</strong>：从<code>U</code>集合所有顶点的边集中，遍历到<code>(B, F)</code>的权值最小，故将<code>F</code>加入到顶点集合<code>U</code>中</p><p> U={A,B,F},V−U={C,D,E,G}</p><p><strong>第四步</strong>：从<code>U</code>集合所有顶点的边集中，遍历到<code>(F, E)</code>的权值最小，故将<code>E</code>加入到顶点集合<code>U</code>中</p><p> U={A,B,F,E},V−U={C,D,G}</p><p><strong>第五步</strong>：从<code>U</code>集合所有顶点的边集中，遍历到<code>(E, D)</code>的权值最小，故将<code>D</code>加入到顶点集合<code>U</code>中</p><p>U={A,B,F,E,D},V−U={C,G}</p><p><strong>第六步</strong>：从<code>U</code>集合所有顶点的边集中，遍历到<code>(D, C)</code>的权值最小，故将<code>C</code>加入到顶点集合<code>U</code>中</p><p>U={A,B,F,E,D,C},V−U={G}</p><p><strong>第七步</strong>：从<code>U</code>集合所有顶点的边集中，遍历到(F, G)的权值最小，故将G加入到顶点集合<code>U</code>中</p><p>U={A,B,F,E,D,C,G},V−U={} , 此时 U=V</p><p>此时，最小生成树构造完成，其顶点依次为<code>A, B, F, E, D, C, G</code></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXVER 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> VertexType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    VertexType vexs[MAXVER];</span><br><span class="line">    <span class="keyword">int</span> arc[MAXVER][MAXVER];</span><br><span class="line">    <span class="keyword">int</span> numVertexes, numEdges;</span><br><span class="line">&#125;MGraph;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MiniSpanTree_Prim</span><span class="params">(MGraph G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> min, i, j, k;  <span class="comment">// min 为当前权值最小值</span></span><br><span class="line">    <span class="keyword">int</span> lowcost[MAXVEX];  <span class="comment">/* 保存顶点间边的权值 */</span></span><br><span class="line">    <span class="keyword">int</span> adjvex[MAXVEX];   <span class="comment">/* 保存相关顶点的下标，即下标与其值所连边为当前最小权值边 */</span></span><br><span class="line">    lowcost[<span class="number">0</span>] = <span class="number">0</span>;  <span class="comment">/* 选取第一个顶点为起始点， 即 v0 加入树， lowcost的值为0，在这里就是此下标的顶点已经加入生成树 */</span></span><br><span class="line">    adjvex[<span class="number">0</span>] = <span class="number">0</span>;   <span class="comment">/* 初始化第一个顶点下标为0 */</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; G.numVertexes; i++)  <span class="comment">/* 循环除下标为 0 外的全部顶点 */</span></span><br><span class="line">    &#123;</span><br><span class="line">        lowcost[i] = G.arc[<span class="number">0</span>][i];  <span class="comment">/* 将与 v0 顶点有边的权值存入数组 */</span></span><br><span class="line">        adjvex[i] = <span class="number">0</span>;  <span class="comment">/* 将其他所有顶点的值初始化为 v0 的下标 */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; G.numVertexes; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        min = INF;   <span class="comment">/* 初始化最小权值为 无穷大 */</span></span><br><span class="line">        j = <span class="number">1</span>, k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(j &lt; G.numVertexes)  <span class="comment">/* 循环全部顶点，寻找当前最小生成树顶点集合中最小权值的边 */</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(lowcost[j] != <span class="number">0</span> &amp;&amp; lowcost[j] &lt; min)  <span class="comment">/* 如果权值不为 0(即不在树中), 且权值小于 min */</span></span><br><span class="line">            &#123;</span><br><span class="line">                min = lowcost[j];  <span class="comment">/* 则让当前权值成为最小值 */</span></span><br><span class="line">                k = j;             <span class="comment">/* 将当前最小值的下标存入k */</span></span><br><span class="line">            &#125;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        lowcost[k] = <span class="number">0</span>;  <span class="comment">/* 将当前顶点的权值设置为0, 表示此顶点已加入树的顶点集合 */</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"(%d, %d)"</span>, adjvex[k], k);  <span class="comment">/* 打印当前顶点边中权值最小的边 */</span></span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">1</span>; j &lt; G.numVertexes; j++)  <span class="comment">/* 循环所有顶点 */</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/* 如果下标为 k 的顶点边集中权值小于已存在的权值, 比如 (v0, v6)权值为INF, 而(v1, v6)权值为 16， 更新*/</span></span><br><span class="line">            <span class="keyword">if</span>(lowcost[j] != <span class="number">0</span> &amp;&amp; G.arc[k][j] &lt; lowcost[j])</span><br><span class="line">            &#123;</span><br><span class="line">                lowcost[j] = G.arc[k][j];  <span class="comment">/* 将较小的权值存入 lowcost 相应位置 */</span></span><br><span class="line">                adjvex[j] = k;   <span class="comment">/* 将下标为 k 的顶点存入 adjvex */</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p class=&quot;description&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;h2 id=&quot;Prim算法&quot;&gt;&lt;a href=&quot;#Prim算法&quot; class=&quot;headerlink&quot; title=&quot;Prim算法&quot;&gt;&lt;/a&gt;Prim算法&lt;/h2&gt;&lt;p&gt;最小生成树之Prim算法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;最小生成树(Minimum Cost Spanning Tree)&lt;/strong&gt; 即构造连通图的最小代价生成树&lt;/p&gt;
&lt;p&gt;思想与dijstra差不多，因此复杂度也一样。&lt;/p&gt;
&lt;p&gt;复杂度：O（N²）&lt;/p&gt;
&lt;p&gt;堆优化：O（ElogN）&lt;/p&gt;
    
    </summary>
    
      <category term="algorithm" scheme="https://yuanfang.tech/categories/algorithm/"/>
    
    
      <category term="Prim" scheme="https://yuanfang.tech/tags/Prim/"/>
    
  </entry>
  
  <entry>
    <title>lightoj1074</title>
    <link href="https://yuanfang.tech/2019/08/04/lightoj1074.html"/>
    <id>https://yuanfang.tech/2019/08/04/lightoj1074.html</id>
    <published>2019-08-03T17:40:42.000Z</published>
    <updated>2019-08-03T17:43:06.617Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p></p><p class="description"></p><br>lightoj1074,SPFA求负环<p></p><a id="more"></a><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://vjudge.net/problem/LightOJ-1074" target="_blank" rel="noopener">https://vjudge.net/problem/LightOJ-1074</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>有n个城市，每一个城市有一个拥挤度ai，从一个城市I到另一个城市J的时间为:(aJ-aI)^3，存在负环。问从第一个城市到达第k个城市所话的时间，如果不能到达，或者时间小于3输出？否则输出所花的时间</p><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><p>spfa找出的所有的负环，把所有负环能到的点都标记一下</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">209</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> n,re[N],m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LT</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to,nex;</span><br><span class="line">&#125; L[N*N];</span><br><span class="line"><span class="keyword">int</span> F[N],cnt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> f,<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    L[cnt].nex = F[f];</span><br><span class="line">    L[cnt].to = t;</span><br><span class="line">    F[f] = cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> que[N*N];</span><br><span class="line"><span class="keyword">int</span> coun[N],cir[N],dis[N],inque[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getdis</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t = re[j] - re[i];</span><br><span class="line">    <span class="keyword">return</span> t*t*t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cir[k] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=F[k];i;i=L[i].nex)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!cir[L[i].to])</span><br><span class="line">        dfs(L[i].to);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(coun,<span class="number">0</span>,<span class="keyword">sizeof</span>(coun));</span><br><span class="line">    <span class="built_in">memset</span>(cir,<span class="number">0</span>,<span class="keyword">sizeof</span>(cir));</span><br><span class="line">    <span class="built_in">memset</span>(inque,<span class="number">0</span>,<span class="keyword">sizeof</span>(inque));</span><br><span class="line">    <span class="keyword">int</span> front = <span class="number">0</span>, rear = <span class="number">0</span>;</span><br><span class="line">    que[rear++] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">memset</span>(dis,INF,<span class="keyword">sizeof</span>(dis));</span><br><span class="line">    dis[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(rear&gt;front)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> e = que[front++] ;</span><br><span class="line">        inque[e] = <span class="literal">false</span>;</span><br><span class="line">        coun[e]++;</span><br><span class="line">        <span class="keyword">if</span>(coun[e]&gt;=n)</span><br><span class="line">        &#123;</span><br><span class="line">            dfs(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=F[e];i;i=L[i].nex)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> to = L[i].to;</span><br><span class="line">            <span class="keyword">if</span>(cir[to]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">int</span> k = getdis(e,to);</span><br><span class="line">            <span class="keyword">if</span>(dis[to]&gt;dis[e]+k)</span><br><span class="line">            &#123;</span><br><span class="line">                dis[to] = dis[e] + k;</span><br><span class="line">                <span class="keyword">if</span>(!inque[to])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(coun[to]&gt;(n&gt;&gt;<span class="number">1</span>)&amp;&amp;front&gt;<span class="number">0</span>)</span><br><span class="line">                    que[--front] = to;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    que[rear++] = to;</span><br><span class="line">                    inque[to] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a);</span><br><span class="line">        <span class="keyword">if</span>(cir[a]||dis[a]&lt;<span class="number">3</span>||dis[a]==INF)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"?\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dis[a]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cas,T=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;cas);</span><br><span class="line">    <span class="keyword">while</span>(cas--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(F,<span class="number">0</span>,<span class="keyword">sizeof</span>(F));cnt = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;re[i]);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line">        <span class="keyword">int</span> a,b;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line">            add(a,b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d:\n"</span>,T++);</span><br><span class="line">        solve();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p class=&quot;description&quot;&gt;&lt;/p&gt;&lt;br&gt;lightoj1074,SPFA求负环&lt;p&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="lightoj" scheme="https://yuanfang.tech/categories/lightoj/"/>
    
    
      <category term="kuangbin" scheme="https://yuanfang.tech/tags/kuangbin/"/>
    
      <category term="spfa" scheme="https://yuanfang.tech/tags/spfa/"/>
    
      <category term="lightoj" scheme="https://yuanfang.tech/tags/lightoj/"/>
    
  </entry>
  
  <entry>
    <title>hdu4370</title>
    <link href="https://yuanfang.tech/2019/08/03/hdu4370.html"/>
    <id>https://yuanfang.tech/2019/08/03/hdu4370.html</id>
    <published>2019-08-03T11:22:20.000Z</published>
    <updated>2019-08-04T05:07:02.540Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p></p><p class="description"></p><br>hdu4370,建图转化 + 最短路径。<p></p><a id="more"></a><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=4370" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=4370</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一个 n*n 的矩阵 C，构造一个符合以下条件的矩阵 X：</p><p><img src="hdu4370\1564895169459.png" alt="1564895169459"></p><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><p>将条件转化为图论最短路径问题，Xij 转化为边 i→j 的权值，那么对应关系为：</p><ul><li>表示点 1 的出度为 1</li><li>表示点 n 的入度为 1</li><li>除了点 1 和点 n 外的其他点出入度相等</li></ul><p>求解的问题转化为点 1 到点 n 的一条最短路径。</p><p>其实还有一种情况，那就是可以从点 1 出发到达其他点然后又回到点 1 形成一个环，同样也可以从点 n 出发回到点 n。这样也是符合条件的，答案为从 1 出发的最小权值环和从 n 出发的最小权值环之和。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 1e9+5</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 310</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dis[maxn];</span><br><span class="line"><span class="keyword">int</span> first[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> out[maxn];</span><br><span class="line"><span class="keyword">int</span> k,n;</span><br><span class="line"><span class="keyword">int</span> e[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="literal">false</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line"><span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i==x)dis[i]=inf;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line">dis[i]=e[x][i];</span><br><span class="line">q.push(i);</span><br><span class="line">vis[i]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> u=q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dis[i]&gt;dis[u]+e[u][i])</span><br><span class="line">&#123;</span><br><span class="line">dis[i] = dis[u] + e[u][i];</span><br><span class="line">                <span class="keyword">if</span> (!vis[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    vis[i] = <span class="literal">true</span>;</span><br><span class="line">                    q.push(i);</span><br><span class="line">                &#125;</span><br><span class="line">&#125;</span><br><span class="line">vis[u]=<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">k=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="literal">false</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">dis[i]=inf;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&gt;y)<span class="keyword">return</span> y;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,x,y,z;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;z);</span><br><span class="line">e[i][j]=z;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//init();</span></span><br><span class="line">spfa(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> ans = dis[n];</span><br><span class="line"><span class="keyword">int</span> cir1 = dis[<span class="number">1</span>]; <span class="comment">// 简单最短路径，“环1”</span></span><br><span class="line"><span class="comment">//init();</span></span><br><span class="line">    spfa(n);</span><br><span class="line">    <span class="keyword">int</span> cirn = dis[n]; <span class="comment">// "环n"</span></span><br><span class="line">    ans = min(ans, cir1 + cirn); <span class="comment">// "环1+环n" 与简单最短路径最小值</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p class=&quot;description&quot;&gt;&lt;/p&gt;&lt;br&gt;hdu4370,建图转化 + 最短路径。&lt;p&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="hdu" scheme="https://yuanfang.tech/categories/hdu/"/>
    
    
      <category term="hdu" scheme="https://yuanfang.tech/tags/hdu/"/>
    
      <category term="kuangbin" scheme="https://yuanfang.tech/tags/kuangbin/"/>
    
      <category term="spfa" scheme="https://yuanfang.tech/tags/spfa/"/>
    
  </entry>
  
  <entry>
    <title>poj3169</title>
    <link href="https://yuanfang.tech/2019/08/03/poj3169.html"/>
    <id>https://yuanfang.tech/2019/08/03/poj3169.html</id>
    <published>2019-08-03T07:46:33.000Z</published>
    <updated>2019-08-03T07:49:57.687Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p></p><p class="description"></p><br>poj3169,单源最短路，SPFA，差分约束<p></p><a id="more"></a><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="http://poj.org/problem?id=3169" target="_blank" rel="noopener">http://poj.org/problem?id=3169</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>一个农夫有n头牛，他希望将这些牛按照编号 1～n排成一条直线，允许有几头牛站在同一点，但是必须按照顺序，有一些牛关系比较好，希望站的距离不超过某个值，而有一些牛关系不太好，所以希望站的距离大于等于某个值，问1号牛和n号牛之间的最远距离是多少。</p><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><p>差分约束的裸题，对于 d[v] - d[u] ≤ w 建立权值为 w 的单向边 e(u,v)，对于 d[v] - d[u]  ≥ w 建立权值为 -w 的单向边 e(v,u)，然后再根据牛必须按顺序排列建立权值为 0 的边 e(i+1,i)，然后最短路就行了。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 1e9+5</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> v,w,next;</span><br><span class="line">&#125;edge[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dis[maxn];</span><br><span class="line"><span class="keyword">int</span> first[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> out[maxn];</span><br><span class="line"><span class="keyword">int</span> k,n,m,s;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">adde</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">edge[k].v=v;</span><br><span class="line">edge[k].w=w;</span><br><span class="line">edge[k].next=first[u];</span><br><span class="line">first[u]=k++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line">q.push(x);</span><br><span class="line">vis[x]=<span class="literal">true</span>;</span><br><span class="line">dis[x]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> u=q.front();</span><br><span class="line">out[u]++;</span><br><span class="line"><span class="keyword">if</span>(out[u]&gt;n)</span><br><span class="line">&#123;</span><br><span class="line">flag=<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">q.pop();</span><br><span class="line">vis[u]=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(i=first[u];i;i=edge[i].next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v=edge[i].v;</span><br><span class="line"><span class="keyword">int</span> w=edge[i].w;</span><br><span class="line"><span class="keyword">if</span>(dis[v]&gt;dis[u]+w)</span><br><span class="line">&#123;</span><br><span class="line">dis[v]=dis[u]+w;</span><br><span class="line"><span class="keyword">if</span>(!vis[v])</span><br><span class="line">&#123;</span><br><span class="line">q.push(v);</span><br><span class="line">vis[v]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag==<span class="number">1</span>)<span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(dis[n]==inf)<span class="built_in">printf</span>(<span class="string">"-2\n"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d"</span>,dis[n]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">k=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">memset</span>(first,<span class="number">0</span>,<span class="keyword">sizeof</span>(first));</span><br><span class="line"><span class="built_in">memset</span>(edge,<span class="number">0</span>,<span class="keyword">sizeof</span>(edge));</span><br><span class="line"><span class="built_in">memset</span>(out,<span class="number">0</span>,<span class="keyword">sizeof</span>(out));</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="literal">false</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">dis[i]=inf;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;s)!=EOF)</span><br><span class="line">&#123;</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">int</span> x,y,z;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">adde(x,y,z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=s;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">adde(y,x,-z);</span><br><span class="line">&#125;</span><br><span class="line">spfa(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p class=&quot;description&quot;&gt;&lt;/p&gt;&lt;br&gt;poj3169,单源最短路，SPFA，差分约束&lt;p&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="poj" scheme="https://yuanfang.tech/categories/poj/"/>
    
    
      <category term="kuangbin" scheme="https://yuanfang.tech/tags/kuangbin/"/>
    
      <category term="spfa" scheme="https://yuanfang.tech/tags/spfa/"/>
    
      <category term="poj" scheme="https://yuanfang.tech/tags/poj/"/>
    
  </entry>
  
  <entry>
    <title>poj1847</title>
    <link href="https://yuanfang.tech/2019/08/03/poj1847.html"/>
    <id>https://yuanfang.tech/2019/08/03/poj1847.html</id>
    <published>2019-08-02T18:13:49.000Z</published>
    <updated>2019-08-02T18:26:27.319Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p></p><p class="description"></p><br>poj1847，怪问题，最简单的最短路教做人，什么叫真正的自闭。<p></p><p><img src="http://pv35325dx.bkt.clouddn.com/8.3.2.png" alt></p><a id="more"></a><p><img src="http://pv35325dx.bkt.clouddn.com/8.3.1.png" alt></p><p>就这破题我debug了一个半小时！</p><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="http://poj.org/problem?id=1847" target="_blank" rel="noopener">http://poj.org/problem?id=1847</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>现在有一铁路网络，有n个交叉点，和一些开关。通过开关可以改变路线方向，使其能驶向其他交叉点。开关的初始状态已知，即（初始直接某两点直接相连）。问从出发点到目的地最少要动多少开关才能到达。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span> <span class="number">2</span> <span class="number">1</span>     <span class="number">3</span>表示共有n个点，接下来有n行，<span class="number">2</span>表示起点，<span class="number">1</span>表示终点</span><br><span class="line"><span class="number">2</span> <span class="number">2</span> <span class="number">3</span>     第一个数<span class="number">2</span>表示后面有<span class="number">2</span>个数，因为这是第<span class="number">1</span>行，所以后面两个数表示从<span class="number">1</span>到<span class="number">2</span>和从<span class="number">1</span>到<span class="number">3</span>的边</span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">1</span>     表示从<span class="number">2</span>到<span class="number">3</span>和从<span class="number">2</span>到<span class="number">1</span>的边</span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">2</span>     表示从<span class="number">3</span>到<span class="number">1</span>和从<span class="number">3</span>到<span class="number">2</span>的边</span><br></pre></td></tr></table></figure><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><p>不用开关的边权值置0，用开关的边权值置1，问题迎刃而解。</p><p>就随手写了个dijstra，想着N就100随便过了。然后提交，TLE？？？？思考了一下觉得可能是输入有问题，经过仔细读题，哦题目读错了不要紧（心态平静），然后重写了一下。</p><p>然后就坠入WA的地狱了Orz……</p><p>排查一个多小时，发现不在函数里输入就会WA（？？？why！！！！？？？？）</p><p>心态大崩。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>WA的版本：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> g[<span class="number">110</span>][<span class="number">110</span>];</span><br><span class="line"><span class="keyword">int</span> dis[<span class="number">110</span>];</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">110</span>];</span><br><span class="line"><span class="keyword">int</span> n,a,b;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijstra</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//memset(vis,false,sizeof(vis));</span></span><br><span class="line"><span class="comment">//int i,j;</span></span><br><span class="line"><span class="comment">//for(i=1;i&lt;=n;i++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//dis[i]=e[f][i];</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//vis[f]=true;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//for(i=1;i&lt;n;i++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int min=inf;</span></span><br><span class="line"><span class="comment">//int temp;</span></span><br><span class="line"><span class="comment">//for(j=1;j&lt;=n;j++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//if(dis[j]&lt;min&amp;&amp;!vis[j])</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//temp=j;</span></span><br><span class="line"><span class="comment">//min=dis[j];</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//vis[temp]=true;</span></span><br><span class="line"><span class="comment">//int v;</span></span><br><span class="line"><span class="comment">//for(v=1;v&lt;=n;v++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//if(e[temp][v]&lt;inf)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//if(!vis[v]&amp;&amp;dis[temp]+e[temp][v]&lt;dis[v])</span></span><br><span class="line"><span class="comment">//dis[v]=dis[temp]+e[temp][v];</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">dis[i]=g[a][i];</span><br><span class="line">vis[i]=<span class="literal">false</span>;</span><br><span class="line">&#125; </span><br><span class="line">    vis[a]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;n;k++)&#123;</span><br><span class="line">        <span class="keyword">int</span> mind=inf,j;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">if</span>(!vis[i] &amp;&amp; dis[i]&lt;mind) mind=dis[i],j=i;</span><br><span class="line">        vis[j]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">if</span>(!vis[i] &amp;&amp; dis[j]+g[j][i]&lt;dis[i]) dis[i]=dis[j]+g[j][i];</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">if</span>(dis[b]&lt;inf) <span class="built_in">cout</span>&lt;&lt;dis[b]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//int i,j;</span></span><br><span class="line"><span class="comment">//scanf("%d%d%d",&amp;n,&amp;a,&amp;b);</span></span><br><span class="line"><span class="comment">//for(i=0;i&lt;=n;i++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//for(j=0;j&lt;=n;j++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//e[i][j]=inf; </span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//for(i=1;i&lt;=n;i++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int k,m;</span></span><br><span class="line"><span class="comment">//scanf("%d%d",&amp;k,&amp;m);</span></span><br><span class="line"><span class="comment">//e[i][m]=0;</span></span><br><span class="line"><span class="comment">//for(j=1;j&lt;k;j++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//scanf("%d",&amp;m);</span></span><br><span class="line"><span class="comment">//e[i][m]=1;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=n;j++)</span><br><span class="line">            g[i][j]=inf;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">int</span> k,m;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;k&gt;&gt;m;g[i][m]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;k;j++)</span><br><span class="line">&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;m;</span><br><span class="line">g[i][m]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">dijstra();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AC版本：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">int</span> g[<span class="number">110</span>][<span class="number">110</span>];</span><br><span class="line"><span class="keyword">int</span> d[<span class="number">110</span>],vis[<span class="number">110</span>];</span><br><span class="line"><span class="keyword">int</span> n,a,b;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dij</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=n;j++)</span><br><span class="line">            g[i][j]=inf;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">int</span> k,m;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;k&gt;&gt;m;g[i][m]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;k;j++)</span><br><span class="line">&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;m;</span><br><span class="line">g[i][m]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">d[i]=g[a][i];</span><br><span class="line">vis[i]=<span class="literal">false</span>;</span><br><span class="line">&#125; </span><br><span class="line">    vis[a]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;n;k++)&#123;</span><br><span class="line">        <span class="keyword">int</span> mind=inf,j;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">if</span>(!vis[i] &amp;&amp; d[i]&lt;mind) mind=d[i],j=i;</span><br><span class="line">        vis[j]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">if</span>(!vis[i] &amp;&amp; d[j]+g[j][i]&lt;d[i]) d[i]=d[j]+g[j][i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(d[b]&lt;inf) <span class="built_in">cout</span>&lt;&lt;d[b]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*struct edge&#123;</span></span><br><span class="line"><span class="comment">    int u,v,w;</span></span><br><span class="line"><span class="comment">&#125;e[10010];</span></span><br><span class="line"><span class="comment">void bellford()&#123;</span></span><br><span class="line"><span class="comment">    cin&gt;&gt;n&gt;&gt;a&gt;&gt;b; a--; b--; int t=-1;</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;n;i++)&#123;</span></span><br><span class="line"><span class="comment">        int k,m; cin&gt;&gt;k&gt;&gt;m; e[++t].u=i; e[t].v=--m; e[t].w=0;</span></span><br><span class="line"><span class="comment">        for(int j=1;j&lt;k;j++)&#123;</span></span><br><span class="line"><span class="comment">            cin&gt;&gt;m; e[++t].u=i; e[t].v=--m; e[t].w=1;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;n;i++) d[i]=inf;</span></span><br><span class="line"><span class="comment">    d[a]=0;</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;n;i++)&#123;</span></span><br><span class="line"><span class="comment">        for(int j=0;j&lt;=t;j++)&#123;</span></span><br><span class="line"><span class="comment">            if(d[ e[j].u ]+e[j].w &lt; d[ e[j].v ]) d[ e[j].v ]=d[ e[j].u ]+e[j].w;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    if(d[b]&lt;inf) cout&lt;&lt;d[b]&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">    else cout&lt;&lt;-1&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 110</span></span><br><span class="line"><span class="comment">//struct Edge&#123;</span></span><br><span class="line"><span class="comment">//    int v,w;</span></span><br><span class="line"><span class="comment">//&#125;e[N*N];</span></span><br><span class="line"><span class="comment">//int root[N];</span></span><br><span class="line"><span class="comment">//int next[N*N];</span></span><br><span class="line"><span class="comment">//void spfa()&#123;</span></span><br><span class="line"><span class="comment">//    queue&lt;int&gt; q;</span></span><br><span class="line"><span class="comment">//    cin&gt;&gt;n&gt;&gt;a&gt;&gt;b; a--; b--; int m=-1;</span></span><br><span class="line"><span class="comment">//    for(int i=0;i&lt;n;i++) root[i]=-1;</span></span><br><span class="line"><span class="comment">//    for(int i=0;i&lt;n;i++)&#123;</span></span><br><span class="line"><span class="comment">//        int k,y; cin&gt;&gt;k;</span></span><br><span class="line"><span class="comment">//        for(int j=0;j&lt;k;j++)&#123;</span></span><br><span class="line"><span class="comment">//            cin&gt;&gt;y;</span></span><br><span class="line"><span class="comment">//            e[++m].v=--y;</span></span><br><span class="line"><span class="comment">//            e[m].w=(j||0);</span></span><br><span class="line"><span class="comment">//            next[m]=root[i];</span></span><br><span class="line"><span class="comment">//            root[i]=m;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//    for(int i=0;i&lt;n;i++) d[i]=inf,vis[i]=0;</span></span><br><span class="line"><span class="comment">//    d[a]=0;</span></span><br><span class="line"><span class="comment">//    q.push(a);</span></span><br><span class="line"><span class="comment">//    while(!q.empty())&#123;</span></span><br><span class="line"><span class="comment">//        int t=q.front();</span></span><br><span class="line"><span class="comment">//        q.pop(); vis[t]=0;</span></span><br><span class="line"><span class="comment">//        for(int i=root[t]; i!=-1; i=next[i])&#123;</span></span><br><span class="line"><span class="comment">//            if( d[t]+e[i].w &lt; d[ e[i].v ] )&#123;</span></span><br><span class="line"><span class="comment">//                d[ e[i].v ]=d[t]+e[i].w;</span></span><br><span class="line"><span class="comment">//                if(!vis[ e[i].v ])&#123;</span></span><br><span class="line"><span class="comment">//                    q.push(e[i].v); vis[ e[i].v ]=1;</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//    if(d[b]&lt;inf) cout&lt;&lt;d[b]&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">//    else cout&lt;&lt;-1&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dij();</span><br><span class="line">    <span class="comment">//bellford();</span></span><br><span class="line"><span class="comment">//    spfa();</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p class=&quot;description&quot;&gt;&lt;/p&gt;&lt;br&gt;poj1847，怪问题，最简单的最短路教做人，什么叫真正的自闭。&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://pv35325dx.bkt.clouddn.com/8.3.2.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="poj" scheme="https://yuanfang.tech/categories/poj/"/>
    
    
      <category term="dijstra" scheme="https://yuanfang.tech/tags/dijstra/"/>
    
      <category term="kuangbin" scheme="https://yuanfang.tech/tags/kuangbin/"/>
    
      <category term="poj" scheme="https://yuanfang.tech/tags/poj/"/>
    
  </entry>
  
</feed>
