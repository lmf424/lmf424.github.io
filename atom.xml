<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>远芳</title>
  
  <subtitle>Hey,Mr. Curiosity.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yuanfang.tech/"/>
  <updated>2019-09-11T07:25:41.144Z</updated>
  <id>https://yuanfang.tech/</id>
  
  <author>
    <name>Mengfei Liu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>朱刘算法</title>
    <link href="https://yuanfang.tech/2019/09/11/%E6%9C%B1%E5%88%98%E7%AE%97%E6%B3%95.html"/>
    <id>https://yuanfang.tech/2019/09/11/朱刘算法.html</id>
    <published>2019-09-11T07:23:37.000Z</published>
    <updated>2019-09-11T07:25:41.144Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p><h2 id="朱刘算法——最小树形图算法"><a href="#朱刘算法——最小树形图算法" class="headerlink" title="朱刘算法——最小树形图算法"></a>朱刘算法——最小树形图算法</h2><a id="more"></a><p>最小有向生成树：给定一个有向带权图G和其中一个点u，找出一个以u为跟结点，权和最小的有向生成树。有向生成树也叫<code>树形图</code>，是指一个类似树的有向图，满足以下条件：<br>1.恰好有一个入度为0的点，称为根结点<br>2.其他结点的入度均为1<br>3.可以从根结点到达其他结点</p><h2 id="算法过程"><a href="#算法过程" class="headerlink" title="算法过程"></a>算法过程</h2><p>1.找到除了root以外其他点的权值最小的入边。用In[i]记录<br>2.如果出现除了root以为存在其他孤立的点，则不存在最小树形图。<br>3.找到图中所有的环，并对环进行缩点，重新编号。<br>4.更新其他点到环上的点的距离<br>5.重复3，4直到没有环为止。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> VN = <span class="number">105</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x7fffffff</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Type&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Directed_MST</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> _n)</span></span>&#123;</span><br><span class="line">        n=_n; </span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">        <span class="built_in">memset</span>(inc, <span class="number">0</span>, <span class="keyword">sizeof</span>(inc));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n; ++i)&#123;</span><br><span class="line">            w[i][i] = INF;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;=n; ++j)</span><br><span class="line">                w[i][j]=w[j][i]=INF;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, Type _w)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(w[u][v]&gt;_w) w[u][v] = _w;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Type <span class="title">directed_mst</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">        <span class="comment">//==  步骤1： 判断能否形成最小树形图，直接dfs遍历 </span></span><br><span class="line">        dfs(u);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i)</span><br><span class="line">            <span class="keyword">if</span>(!vis[i]) &#123; <span class="keyword">return</span> <span class="number">-1</span>; &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//== 如果可以形成最小树形图，继续</span></span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="comment">//== 1. 找最小前驱边  </span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i)<span class="keyword">if</span>(i!=u&amp;&amp;!inc[i])&#123;</span><br><span class="line">                w[i][i]=INF, pre[i] = i;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; ++j)<span class="keyword">if</span>(!inc[j] &amp;&amp; w[j][i]&lt;w[pre[i]][i])&#123;</span><br><span class="line">                    pre[i] = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//== 2.判断是否有环</span></span><br><span class="line">            <span class="keyword">int</span> i;</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n; ++i)<span class="keyword">if</span>(i!=u&amp;&amp;!inc[i])&#123;</span><br><span class="line">                <span class="keyword">int</span> j=i, cnt=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span>(j!=u &amp;&amp; pre[j]!=i &amp;&amp; cnt&lt;=n) j=pre[j], ++cnt;</span><br><span class="line">                <span class="keyword">if</span>(j==u || cnt&gt;n) <span class="keyword">continue</span>; <span class="comment">//没找到</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//== 没有找到环,得到答案              </span></span><br><span class="line">            <span class="keyword">if</span>(i&gt;n)&#123;  </span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i)<span class="keyword">if</span>(i!=u &amp;&amp; !inc[i]) ans+=w[pre[i]][i];</span><br><span class="line">                <span class="keyword">return</span> ans;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//==  有环，进行收缩  </span></span><br><span class="line">            <span class="keyword">int</span> j=i;</span><br><span class="line">            <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">            <span class="keyword">do</span>&#123;</span><br><span class="line">                ans += w[pre[j]][j], j=pre[j], vis[j]=inc[j]=<span class="literal">true</span>;</span><br><span class="line">            &#125;<span class="keyword">while</span>(j!=i);</span><br><span class="line">            inc[i] = <span class="literal">false</span>; <span class="comment">// 环缩成了点i，点i仍然存在</span></span><br><span class="line"> </span><br><span class="line">            <span class="comment">//==  收缩</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>; k&lt;=n; ++k)<span class="keyword">if</span>(vis[k])&#123; <span class="comment">// 在环中的点</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; ++j)<span class="keyword">if</span>(!vis[j])&#123;  <span class="comment">// 不在环中的点</span></span><br><span class="line">                    <span class="keyword">if</span>(w[i][j] &gt; w[k][j]) w[i][j] = w[k][j];</span><br><span class="line">                    <span class="keyword">if</span>(w[j][k]&lt;INF &amp;&amp; w[j][k]-w[pre[k]][k] &lt; w[j][i])</span><br><span class="line">                        w[j][i] = w[j][k] - w[pre[k]][k];</span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;      </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// 从根结点遍历一遍，判断是否存在最小树形图</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">        vis[u] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i)<span class="keyword">if</span>(!vis[i]&amp;&amp;w[u][i]&lt;INF)&#123;</span><br><span class="line">            dfs(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Type ans;         <span class="comment">// 所求答案</span></span><br><span class="line">    <span class="keyword">int</span> n;            <span class="comment">// 结点个数</span></span><br><span class="line">    <span class="keyword">int</span> pre[VN];      <span class="comment">// 权值最小的前驱边</span></span><br><span class="line">    <span class="keyword">bool</span> vis[VN];     <span class="comment">// 是在环中还是在环外</span></span><br><span class="line">    <span class="keyword">bool</span> inc[VN];     <span class="comment">// 该点是否被删除了（收缩）</span></span><br><span class="line">    Type w[VN][VN];   <span class="comment">// 图</span></span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">Directed_MST&lt;<span class="keyword">double</span>&gt;G;</span><br><span class="line"><span class="keyword">double</span> x[VN],y[VN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">getDist</span><span class="params">(<span class="keyword">double</span> x1,<span class="keyword">double</span> y1,<span class="keyword">double</span> x2,<span class="keyword">double</span> y2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(<span class="built_in">pow</span>(x1-x2,<span class="number">2</span>)+<span class="built_in">pow</span>(y1-y2,<span class="number">2</span>));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m))&#123;</span><br><span class="line">        G.init(n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>,&amp;x[i],&amp;y[i]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; ++i)&#123;</span><br><span class="line">            <span class="keyword">int</span> a,b;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line">            <span class="keyword">if</span>(a==b)<span class="keyword">continue</span>;</span><br><span class="line">            G.insert(a,b,getDist(x[a],y[a],x[b],y[b]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">double</span> ans = G.directed_mst(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(ans &lt; <span class="number">0</span>) <span class="built_in">puts</span>(<span class="string">"poor snoopy"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%.2f\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;&lt;/p&gt;

&lt;h2 id=&quot;朱刘算法——最小树形图算法&quot;&gt;&lt;a href=&quot;#朱刘算法——最小树形图算法&quot; class=&quot;headerlink&quot; title=&quot;朱刘算法——最小树形图算法&quot;&gt;&lt;/a&gt;朱刘算法——最小树形图算法&lt;/h2&gt;
    
    </summary>
    
      <category term="algorithm" scheme="https://yuanfang.tech/categories/algorithm/"/>
    
    
      <category term="朱刘算法" scheme="https://yuanfang.tech/tags/%E6%9C%B1%E5%88%98%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>uva11183</title>
    <link href="https://yuanfang.tech/2019/09/11/uva11183.html"/>
    <id>https://yuanfang.tech/2019/09/11/uva11183.html</id>
    <published>2019-09-11T07:21:51.000Z</published>
    <updated>2019-09-11T07:22:59.074Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p><p>uva11183,最小树形图</p><a id="more"></a><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://vjudge.net/problem/UVA-11183" target="_blank" rel="noopener">https://vjudge.net/problem/UVA-11183</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>求最小树形图</p><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><p>n最大1000</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> VN = <span class="number">1010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x7fffffff</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Type&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Directed_MST</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> _n)</span></span>&#123;</span><br><span class="line">        n=_n; </span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">        <span class="built_in">memset</span>(inc, <span class="number">0</span>, <span class="keyword">sizeof</span>(inc));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n; ++i)&#123;</span><br><span class="line">            w[i][i] = INF;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;=n; ++j)</span><br><span class="line">                w[i][j]=w[j][i]=INF;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, Type _w)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(w[u][v]&gt;_w) w[u][v] = _w;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Type <span class="title">directed_mst</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">        <span class="comment">//==  步骤1： 判断能否形成最小树形图，直接dfs遍历 </span></span><br><span class="line">        dfs(u);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i)</span><br><span class="line">            <span class="keyword">if</span>(!vis[i]) &#123; <span class="keyword">return</span> <span class="number">-1</span>; &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//== 如果可以形成最小树形图，继续</span></span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="comment">//== 1. 找最小前驱边  </span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i)<span class="keyword">if</span>(i!=u&amp;&amp;!inc[i])&#123;</span><br><span class="line">                w[i][i]=INF, pre[i] = i;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; ++j)<span class="keyword">if</span>(!inc[j] &amp;&amp; w[j][i]&lt;w[pre[i]][i])&#123;</span><br><span class="line">                    pre[i] = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//== 2.判断是否有环</span></span><br><span class="line">            <span class="keyword">int</span> i;</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n; ++i)<span class="keyword">if</span>(i!=u&amp;&amp;!inc[i])&#123;</span><br><span class="line">                <span class="keyword">int</span> j=i, cnt=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span>(j!=u &amp;&amp; pre[j]!=i &amp;&amp; cnt&lt;=n) j=pre[j], ++cnt;</span><br><span class="line">                <span class="keyword">if</span>(j==u || cnt&gt;n) <span class="keyword">continue</span>; <span class="comment">//没找到</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//== 没有找到环,得到答案              </span></span><br><span class="line">            <span class="keyword">if</span>(i&gt;n)&#123;  </span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i)<span class="keyword">if</span>(i!=u &amp;&amp; !inc[i]) ans+=w[pre[i]][i];</span><br><span class="line">                <span class="keyword">return</span> ans;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//==  有环，进行收缩  </span></span><br><span class="line">            <span class="keyword">int</span> j=i;</span><br><span class="line">            <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">            <span class="keyword">do</span>&#123;</span><br><span class="line">                ans += w[pre[j]][j], j=pre[j], vis[j]=inc[j]=<span class="literal">true</span>;</span><br><span class="line">            &#125;<span class="keyword">while</span>(j!=i);</span><br><span class="line">            inc[i] = <span class="literal">false</span>; <span class="comment">// 环缩成了点i，点i仍然存在</span></span><br><span class="line"> </span><br><span class="line">            <span class="comment">//==  收缩</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>; k&lt;=n; ++k)<span class="keyword">if</span>(vis[k])&#123; <span class="comment">// 在环中点点</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; ++j)<span class="keyword">if</span>(!vis[j])&#123;  <span class="comment">// 不在环中的点</span></span><br><span class="line">                    <span class="keyword">if</span>(w[i][j] &gt; w[k][j]) w[i][j] = w[k][j];</span><br><span class="line">                    <span class="keyword">if</span>(w[j][k]&lt;INF &amp;&amp; w[j][k]-w[pre[k]][k] &lt; w[j][i])</span><br><span class="line">                        w[j][i] = w[j][k] - w[pre[k]][k];</span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;      </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// 从根结点遍历一遍，判断是否存在最小树形图</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">        vis[u] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i)<span class="keyword">if</span>(!vis[i]&amp;&amp;w[u][i]&lt;INF)&#123;</span><br><span class="line">            dfs(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Type ans;         <span class="comment">// 所求答案</span></span><br><span class="line">    <span class="keyword">int</span> n;            <span class="comment">// 结点个数</span></span><br><span class="line">    <span class="keyword">int</span> pre[VN];      <span class="comment">// 权值最小的前驱边</span></span><br><span class="line">    <span class="keyword">bool</span> vis[VN];     <span class="comment">// 是在环中还是在环外</span></span><br><span class="line">    <span class="keyword">bool</span> inc[VN];     <span class="comment">// 该点是否被删除了（收缩）</span></span><br><span class="line">    Type w[VN][VN];   <span class="comment">// 图</span></span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">Directed_MST&lt;<span class="keyword">double</span>&gt;G;</span><br><span class="line"><span class="keyword">double</span> x[VN],y[VN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">getDist</span><span class="params">(<span class="keyword">double</span> x1,<span class="keyword">double</span> y1,<span class="keyword">double</span> x2,<span class="keyword">double</span> y2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(<span class="built_in">pow</span>(x1-x2,<span class="number">2</span>)+<span class="built_in">pow</span>(y1-y2,<span class="number">2</span>));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">1</span>;x&lt;=t;x++)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">        G.init(n);</span><br><span class="line"><span class="comment">//        for(int i=1; i&lt;=n; ++i)</span></span><br><span class="line"><span class="comment">//            scanf("%lf%lf",&amp;x[i],&amp;y[i]);</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; ++i)&#123;</span><br><span class="line">            <span class="keyword">int</span> a,b,ddd;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;a,&amp;b,&amp;ddd);</span><br><span class="line">            <span class="keyword">if</span>(a==b)<span class="keyword">continue</span>;</span><br><span class="line">            G.insert(a+<span class="number">1</span>,b+<span class="number">1</span>,ddd);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = G.directed_mst(<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: "</span>,x);</span><br><span class="line">        <span class="keyword">if</span>(ans &lt; <span class="number">0</span>) <span class="built_in">puts</span>(<span class="string">"Possums!"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;&lt;/p&gt;

&lt;p&gt;uva11183,最小树形图&lt;/p&gt;
    
    </summary>
    
      <category term="uva" scheme="https://yuanfang.tech/categories/uva/"/>
    
    
      <category term="kuangbin" scheme="https://yuanfang.tech/tags/kuangbin/"/>
    
      <category term="最小树形图" scheme="https://yuanfang.tech/tags/%E6%9C%80%E5%B0%8F%E6%A0%91%E5%BD%A2%E5%9B%BE/"/>
    
      <category term="uva" scheme="https://yuanfang.tech/tags/uva/"/>
    
  </entry>
  
  <entry>
    <title>uva10600</title>
    <link href="https://yuanfang.tech/2019/09/11/uva10600.html"/>
    <id>https://yuanfang.tech/2019/09/11/uva10600.html</id>
    <published>2019-09-11T07:15:38.000Z</published>
    <updated>2019-09-11T07:16:35.267Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p><p>uva10600,输出最小生成树和次小生成树</p><a id="more"></a><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://vjudge.net/problem/UVA-10600" target="_blank" rel="noopener">https://vjudge.net/problem/UVA-10600</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>输出最小生成树和次小生成树</p><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><p>kruskal次小生成树模板</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">11000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> parent[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> u,v,w;</span><br><span class="line">&#125;e[maxn];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(edge a,edge b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.w&lt;b.w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">        parent[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_set</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k, i, r = x;</span><br><span class="line">    <span class="keyword">while</span>(parent[r] != r) &#123;</span><br><span class="line">        r = parent[r];</span><br><span class="line">    &#125;</span><br><span class="line">    k = x;</span><br><span class="line">    <span class="keyword">while</span>(k != r) &#123;</span><br><span class="line">        i = parent[k];</span><br><span class="line">        parent[k] = r;</span><br><span class="line">        k = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kruskal</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, x, y,cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> sum;</span><br><span class="line">    <span class="built_in">set</span>();</span><br><span class="line">    <span class="keyword">int</span> b[maxn];</span><br><span class="line">    <span class="keyword">for</span>(sum = <span class="number">0</span>, i = <span class="number">0</span>; i &lt; m&amp;&amp;cnt&lt;n<span class="number">-1</span>; i++) &#123;</span><br><span class="line">        x = find_set(e[i].u);</span><br><span class="line">        y = find_set(e[i].v);</span><br><span class="line">        <span class="keyword">if</span>(x == y)<span class="keyword">continue</span>;</span><br><span class="line">        parent[x] = parent[y]; ++cnt;</span><br><span class="line">        sum=sum+e[i].w;</span><br><span class="line">b[cnt]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    <span class="keyword">int</span> k,ans=sum;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d "</span>,ans);</span><br><span class="line">    k=cnt;</span><br><span class="line">    ans=inf;</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=k;j++)</span><br><span class="line">    &#123;</span><br><span class="line">    cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">set</span>();</span><br><span class="line">    <span class="keyword">for</span>(sum = <span class="number">0</span>, i = <span class="number">0</span>; i &lt; m&amp;&amp;cnt&lt;n<span class="number">-1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(b[j]==i)<span class="keyword">continue</span>;</span><br><span class="line">        x = find_set(e[i].u);</span><br><span class="line">        y = find_set(e[i].v);</span><br><span class="line">        <span class="keyword">if</span>(x == y)<span class="keyword">continue</span>;</span><br><span class="line">        parent[x] = parent[y]; ++cnt;</span><br><span class="line">        sum=sum+e[i].w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(cnt==n<span class="number">-1</span>&amp;&amp;sum&lt;ans)ans=sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"><span class="keyword">while</span>(t--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;e[i].u,&amp;e[i].v,&amp;e[i].w);</span><br><span class="line">&#125;</span><br><span class="line">sort(e,e+m,cmp);</span><br><span class="line"><span class="keyword">int</span> ans=kruskal(n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;&lt;/p&gt;

&lt;p&gt;uva10600,输出最小生成树和次小生成树&lt;/p&gt;
    
    </summary>
    
    
      <category term="kuangbin" scheme="https://yuanfang.tech/tags/kuangbin/"/>
    
      <category term="uva" scheme="https://yuanfang.tech/tags/uva/"/>
    
      <category term="次小生成树" scheme="https://yuanfang.tech/tags/%E6%AC%A1%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>uva10462</title>
    <link href="https://yuanfang.tech/2019/09/11/uva10462.html"/>
    <id>https://yuanfang.tech/2019/09/11/uva10462.html</id>
    <published>2019-09-11T07:12:14.000Z</published>
    <updated>2019-09-11T07:13:21.132Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p><p>uva10462,输出最小生成树和次小生成树</p><a id="more"></a><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>输出次小生成树</p><p>如果没有最小生成树就输出no way</p><p>如果没有次小生成树就输出no second way</p><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><p>= =</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">11000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> parent[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> u,v,w;</span><br><span class="line">&#125;e[maxn];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(edge a,edge b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.w&lt;b.w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">        parent[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_set</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k, i, r = x;</span><br><span class="line">    <span class="keyword">while</span>(parent[r] != r) &#123;</span><br><span class="line">        r = parent[r];</span><br><span class="line">    &#125;</span><br><span class="line">    k = x;</span><br><span class="line">    <span class="keyword">while</span>(k != r) &#123;</span><br><span class="line">        i = parent[k];</span><br><span class="line">        parent[k] = r;</span><br><span class="line">        k = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kruskal</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, x, y,cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> sum;</span><br><span class="line">    <span class="built_in">set</span>();</span><br><span class="line">    <span class="keyword">int</span> b[maxn];</span><br><span class="line">    <span class="keyword">for</span>(sum = <span class="number">0</span>, i = <span class="number">0</span>; i &lt; m&amp;&amp;cnt&lt;n<span class="number">-1</span>; i++) &#123;</span><br><span class="line">        x = find_set(e[i].u);</span><br><span class="line">        y = find_set(e[i].v);</span><br><span class="line">        <span class="keyword">if</span>(x == y)<span class="keyword">continue</span>;</span><br><span class="line">        parent[x] = parent[y]; ++cnt;</span><br><span class="line">        sum=sum+e[i].w;</span><br><span class="line">b[cnt]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    <span class="keyword">int</span> k,ans=sum;</span><br><span class="line">    <span class="keyword">if</span>(cnt&lt;n<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"No way\n"</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">    k=cnt;</span><br><span class="line">    ans=inf;</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=k;j++)</span><br><span class="line">    &#123;</span><br><span class="line">    cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">set</span>();</span><br><span class="line">    <span class="keyword">for</span>(sum = <span class="number">0</span>, i = <span class="number">0</span>; i &lt; m&amp;&amp;cnt&lt;n<span class="number">-1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(b[j]==i)<span class="keyword">continue</span>;</span><br><span class="line">        x = find_set(e[i].u);</span><br><span class="line">        y = find_set(e[i].v);</span><br><span class="line">        <span class="keyword">if</span>(x == y)<span class="keyword">continue</span>;</span><br><span class="line">        parent[x] = parent[y]; ++cnt;</span><br><span class="line">        sum=sum+e[i].w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(cnt==n<span class="number">-1</span>&amp;&amp;sum&lt;ans)ans=sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ans==inf)<span class="built_in">printf</span>(<span class="string">"No second way\n"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">1</span>;x&lt;=t;x++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;e[i].u,&amp;e[i].v,&amp;e[i].w);</span><br><span class="line">&#125;</span><br><span class="line">sort(e,e+m,cmp);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case #%d : "</span>,x);</span><br><span class="line">kruskal(n);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;&lt;/p&gt;

&lt;p&gt;uva10462,输出最小生成树和次小生成树&lt;/p&gt;
    
    </summary>
    
      <category term="uva" scheme="https://yuanfang.tech/categories/uva/"/>
    
    
      <category term="kuangbin" scheme="https://yuanfang.tech/tags/kuangbin/"/>
    
      <category term="uva" scheme="https://yuanfang.tech/tags/uva/"/>
    
      <category term="次小生成树" scheme="https://yuanfang.tech/tags/%E6%AC%A1%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>hdu2121</title>
    <link href="https://yuanfang.tech/2019/09/11/hdu2121.html"/>
    <id>https://yuanfang.tech/2019/09/11/hdu2121.html</id>
    <published>2019-09-11T06:55:50.000Z</published>
    <updated>2019-09-11T06:58:55.316Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p><p>hdu2121,最小树形图</p><a id="more"></a><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>需要你在一些城市中选一个做首都 。</p><p>要求首都都能到其他城市 , 道路花费要最少 , 且道路都是单向的 。</p><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><p>因为并不知道源点，所以就需要不定根。</p><p>不定根就是加一个虚根(原本不存在的点) , 可以让这个虚根到每个点的距离大于原本所有点连接的道路花费之和sum , 然后计算出的结果减去sum,如果比sum还大就可以认为通过这个虚拟节点我们连过原图中两个点，即原图是不连通的，我们就可以认为不存在最小树形图。</p><p>那么真正的根呢 , 在找最小入弧时，如果这条弧的起点是虚拟根，那么这条弧的终点就是要求的根，因为如果有多解的话，必然存在一个环，环上的顶点都可以做根，但是我们根据最小入边的性质，可知，如果没缩点，必然找不到那个根，因为虚拟根连的边都非常大。但是缩点后，找到的必然是最小的那个序号的根。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e3</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">int</span> id[MAXN] , vis[MAXN] , pre[MAXN] , pos;</span><br><span class="line">LL INF = <span class="number">1e17</span> , d[MAXN];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> u , v , cost;</span><br><span class="line">&#125;edge[MAXN * MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">zhuliu</span><span class="params">(<span class="keyword">int</span> root , <span class="keyword">int</span> V , <span class="keyword">int</span> E)</span> </span>&#123;</span><br><span class="line">    LL res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; V ; i++) &#123;</span><br><span class="line">            d[i] = INF;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; E ; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> u = edge[i].u , v = edge[i].v;</span><br><span class="line">            <span class="keyword">if</span>(u != v &amp;&amp; d[v] &gt; edge[i].cost) &#123;</span><br><span class="line">                d[v] = edge[i].cost;</span><br><span class="line">                pre[v] = u;</span><br><span class="line">                <span class="keyword">if</span>(u == root) &#123;</span><br><span class="line">                    pos = i;    <span class="comment">//记录位置    除了这里不一样 其他地方都是朱刘算法的模板</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; V ; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(d[i] == INF &amp;&amp; i != root) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> cont = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(id , <span class="number">-1</span> , <span class="keyword">sizeof</span>(id));</span><br><span class="line">        <span class="built_in">memset</span>(vis , <span class="number">-1</span> , <span class="keyword">sizeof</span>(vis));</span><br><span class="line">        d[root] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; V ; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> v = i;</span><br><span class="line">            res += d[i];</span><br><span class="line">            <span class="keyword">while</span>(id[v] == <span class="number">-1</span> &amp;&amp; vis[v] != i &amp;&amp; v != root) &#123;</span><br><span class="line">                vis[v] = i;</span><br><span class="line">                v = pre[v];</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="keyword">if</span>(id[v] == <span class="number">-1</span> &amp;&amp; v != root) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> u = pre[v] ; u != v ; u = pre[u]) &#123;</span><br><span class="line">                    id[u] = cont;</span><br><span class="line">                &#125;</span><br><span class="line">                id[v] = cont++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!cont) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; V ; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(id[i] == <span class="number">-1</span>) &#123;</span><br><span class="line">                id[i] = cont++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; E ; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> u = edge[i].u , v = edge[i].v;</span><br><span class="line">            edge[i].u = id[u];</span><br><span class="line">            edge[i].v = id[v];</span><br><span class="line">            <span class="keyword">if</span>(id[u] != id[v]) &#123;</span><br><span class="line">                edge[i].cost -= d[v];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        V = cont;</span><br><span class="line">        root = id[root];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n , m;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d %d"</span> , &amp;n , &amp;m)) &#123;</span><br><span class="line">        LL sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; m ; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span> , &amp;edge[i].u , &amp;edge[i].v , &amp;edge[i].cost);</span><br><span class="line">            edge[i].u++ , edge[i].v++;</span><br><span class="line">            sum += edge[i].cost;</span><br><span class="line">        &#125;</span><br><span class="line">        sum++;   <span class="comment">//边权大于总权值</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = m ; i &lt; n + m ; i++) &#123;</span><br><span class="line">            edge[i].u = <span class="number">0</span>;    <span class="comment">//0为虚拟节点</span></span><br><span class="line">            edge[i].v = i - m + <span class="number">1</span>;</span><br><span class="line">            edge[i].cost = sum;</span><br><span class="line">        &#125;</span><br><span class="line">        LL res = zhuliu(<span class="number">0</span> , n + <span class="number">1</span> , n + m);   <span class="comment">//n + 1 个点  n + m 条边</span></span><br><span class="line">        <span class="keyword">if</span>(res == <span class="number">-1</span> || res - sum &gt;= sum) &#123;    <span class="comment">//要是res - sum &lt; sum 的话就说明 0的出度为1  说明原图是连通图</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"impossible\n\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld %d\n\n"</span> , res - sum , pos - m);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;&lt;/p&gt;

&lt;p&gt;hdu2121,最小树形图&lt;/p&gt;
    
    </summary>
    
      <category term="hdu" scheme="https://yuanfang.tech/categories/hdu/"/>
    
    
      <category term="hdu" scheme="https://yuanfang.tech/tags/hdu/"/>
    
      <category term="kuangbin" scheme="https://yuanfang.tech/tags/kuangbin/"/>
    
      <category term="最小树形图" scheme="https://yuanfang.tech/tags/%E6%9C%80%E5%B0%8F%E6%A0%91%E5%BD%A2%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>2018ningchuanCCPC网络赛</title>
    <link href="https://yuanfang.tech/2019/08/31/2018ningchuanCCPC%E7%BD%91%E7%BB%9C%E8%B5%9B.html"/>
    <id>https://yuanfang.tech/2019/08/31/2018ningchuanCCPC网络赛.html</id>
    <published>2019-08-31T12:51:10.000Z</published>
    <updated>2019-08-31T14:40:23.389Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p></p><p class="description"></p><br>2018CCPC银川网络赛<p></p><a id="more"></a><h2 id="A-栈内最大值（Maximum-Element-In-A-Stack）"><a href="#A-栈内最大值（Maximum-Element-In-A-Stack）" class="headerlink" title="A.栈内最大值（Maximum Element In A Stack）"></a>A.栈内最大值（Maximum Element In A Stack）</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>题目会给你一串代码，根据题意维护这个栈。</p><p>每次进行一次push或pop操作的时，用i乘栈内最大的数XOR ans，若栈中没有数，则最大的数为0</p><h3 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h3><p>每次push的时候判断一下，如果push的数大于栈顶的数就push该数</p><p>否则就push（栈.top( ) ）</p><p>这样的话栈.top（）就是栈内当前最大的数</p><p>结果会很大，需要用longlong</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span>  <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">stack</span> &lt;<span class="keyword">int</span>&gt;st;</span><br><span class="line"><span class="keyword">int</span> n,p,q,m,k;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> aw;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> SA,SB,SC;</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">rng61</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SA ^=SA&lt;&lt;<span class="number">16</span>;</span><br><span class="line">SA ^=SA&gt;&gt;<span class="number">5</span>;</span><br><span class="line">SA ^=SA&lt;&lt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> t=SA;</span><br><span class="line">SA=SB;</span><br><span class="line">SB=SC;</span><br><span class="line">SC^=t^SA;</span><br><span class="line"><span class="keyword">return</span> SC;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gen</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">aw=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d%d%u%u%u"</span>,&amp;n,&amp;p,&amp;q,&amp;m,&amp;SA,&amp;SB,&amp;SC);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> f=rng61()%(p+q);</span><br><span class="line"><span class="keyword">if</span>(f&lt;p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> ww=rng61()%m+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(st.empty())</span><br><span class="line">&#123;</span><br><span class="line">st.push(ww);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ww&gt;st.top()) st.push(ww);</span><br><span class="line"><span class="keyword">else</span> st.push(st.top());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!st.empty())</span><br><span class="line">&#123;</span><br><span class="line">st.pop();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> u=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(!st.empty())</span><br><span class="line">&#123;</span><br><span class="line">u= st.top();</span><br><span class="line">&#125; </span><br><span class="line">aw =aw^(u*i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">1</span>;x&lt;=t;x++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(!st.empty())</span><br><span class="line">&#123;</span><br><span class="line">st.pop();</span><br><span class="line">&#125;</span><br><span class="line">aw=<span class="number">0</span>; </span><br><span class="line">gen();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case #%d: %lld\n"</span>,x,aw);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Rolling-The-Polygon"><a href="#B-Rolling-The-Polygon" class="headerlink" title="B.Rolling The Polygon"></a>B.Rolling The Polygon</h2><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><p>按照逆时针绕向给出一个途多边形的n个顶点，再给出凸多边形内部（含边界）一点Q。</p><p>现在要将这个凸多边形在地上无滑动地滚动一周，初始时P0P1与地面接触，假设当前时PiP（i+1）mod n边与地面接触，那么滚动一下之后则是P（i+1）mod n与P（i+2）mod n边与地面接触。</p><p>不难发现，从初始状态滚动n下之后P0P1边再次与地面接触，这时认为凸多边形已经滚动了一周。</p><p>求凸多边形滚动一周之后点Q经过的轨迹长度。</p><h3 id="细节-1"><a href="#细节-1" class="headerlink" title="细节"></a>细节</h3><p>awnb</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"bits/stdc++.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI=<span class="number">2.0</span>*<span class="built_in">asin</span>(<span class="number">1.0</span>);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span>&#123;</span></span><br><span class="line"><span class="keyword">double</span> x,y;</span><br><span class="line">&#125;p[<span class="number">55</span>],Q;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Ldir</span>&#123;</span><span class="keyword">double</span> dx,dy;&#125;; </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Lpoint</span>&#123;</span><span class="keyword">double</span> x,y;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Lline</span>&#123;</span>Lpoint p;Ldir dir;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">num_r</span><span class="params">(point p1,point p2)</span></span>&#123;<span class="comment">//p1与p2的距离 </span></span><br><span class="line"><span class="keyword">return</span> (<span class="built_in">sqrt</span>((p1.x-p2.x)*(p1.x-p2.x)+(p1.y-p2.y)*(p1.y-p2.y)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">format</span><span class="params">(Lline ln,<span class="keyword">double</span> &amp;A,<span class="keyword">double</span> &amp;B,<span class="keyword">double</span> &amp;C)</span></span>&#123;</span><br><span class="line">A=ln.dir.dy;</span><br><span class="line">B=-ln.dir.dx;</span><br><span class="line">C=ln.p.y*ln.dir.dx-ln.p.x*ln.dir.dy;</span><br><span class="line"><span class="keyword">return</span> ; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">angle_LL</span><span class="params">(Lline line1,Lline line2)</span></span>&#123;</span><br><span class="line"><span class="keyword">double</span> A1,B1,C1;</span><br><span class="line">format(line1,A1,B1,C1);</span><br><span class="line"><span class="keyword">double</span> A2,B2,C2;</span><br><span class="line">format(line2,A2,B2,C2);</span><br><span class="line"><span class="keyword">if</span>(A1*A2+B1*B2==<span class="number">0</span>)<span class="keyword">return</span> PI/<span class="number">2.0</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">double</span> t=<span class="built_in">fabs</span>((A1*B2-A2*B1)/(A1*A2+B1*B2));</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">atan</span>(t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">num_a</span><span class="params">(point p1,point p2,point p3)</span></span>&#123;</span><br><span class="line">Lline line1,line2;</span><br><span class="line">line1.dir.dx=p2.x-p1.x;</span><br><span class="line">line1.dir.dy=p2.y-p1.y;</span><br><span class="line">line1.p.x=p2.x;</span><br><span class="line">line1.p.y=p2.y;</span><br><span class="line">line2.dir.dx=p3.x-p2.x;</span><br><span class="line">line2.dir.dy=p3.y-p2.y;</span><br><span class="line">line2.p.x=p3.x;</span><br><span class="line">line2.p.y=p3.y;</span><br><span class="line"><span class="keyword">double</span> ans=angle_LL(line1,line2);</span><br><span class="line"><span class="keyword">double</span> a,b,c;</span><br><span class="line">a=num_r(p1,p2);</span><br><span class="line">b=num_r(p2,p3);</span><br><span class="line">c=num_r(p1,p3);</span><br><span class="line"><span class="keyword">if</span>((a*a+b*b)&gt;(c*c))ans=PI-ans;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">double</span> r,a;</span><br><span class="line"><span class="keyword">double</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">r=num_r(Q,p[i]);</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">0</span>)a=num_a(p[n<span class="number">-1</span>],p[i],p[i+<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(i==n<span class="number">-1</span>)a=num_a(p[i<span class="number">-1</span>],p[i],p[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">else</span> a=num_a(p[i<span class="number">-1</span>],p[i],p[i+<span class="number">1</span>]);</span><br><span class="line">ans+=a*r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t,kase=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>,&amp;p[i].x,&amp;p[i].y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>,&amp;Q.x,&amp;Q.y);</span><br><span class="line"><span class="keyword">double</span> ans=solve();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case #%d: %.3lf\n"</span>,kase++,ans);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Caesar-Cipher"><a href="#C-Caesar-Cipher" class="headerlink" title="C.Caesar Cipher"></a>C.Caesar Cipher</h2><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><p>t组数据，样例有n个字母，密文有m个字母。</p><p>接下来两行第一行为加密前的字符串，第二行为加密后的字符串。</p><p>第三行为加密后的字符串，根据一二两行的加密规则还原加密前的字符串。</p><h3 id="细节-2"><a href="#细节-2" class="headerlink" title="细节"></a>细节</h3><p>注意右移后大于Z的问题</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,m,t;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">1</span>;x&lt;=t;x++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">60</span>],s1[<span class="number">60</span>],s2[<span class="number">60</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">&#123;</span><br><span class="line">getchar();</span><br><span class="line">gets(s);</span><br><span class="line">gets(s1);</span><br><span class="line">gets(s2);</span><br><span class="line"><span class="keyword">int</span> d;</span><br><span class="line">d=s1[<span class="number">0</span>]-s[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">if</span>(d&lt;<span class="number">0</span>)d=d+<span class="number">26</span>;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="comment">//printf("%d\n",d);</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(s2[i]-d&lt;<span class="string">'A'</span>)</span><br><span class="line">&#123;</span><br><span class="line">s2[i]=<span class="string">'Z'</span>-(d-s2[i]+<span class="string">'A'</span>)+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> s2[i]=s2[i]-d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case #%d: "</span>,x);<span class="built_in">puts</span>(s2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Take-Your-Seat"><a href="#D-Take-Your-Seat" class="headerlink" title="D.Take Your Seat"></a>D.Take Your Seat</h2><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><p>有两个问题，第一个，有n个人，n个座位，按顺序上去，1号丢了号码牌，问最后一个人上去做对位置的概率；</p><p>第二个：m个人，随机上去，m个座位，问最后一个人上去做对的概率；</p><h3 id="细节-3"><a href="#细节-3" class="headerlink" title="细节"></a>细节</h3><p>awnb</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"bits/stdc++.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">double</span> p[<span class="number">55</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t,kase=<span class="number">1</span>;</span><br><span class="line">p[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">p[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">p[<span class="number">2</span>]=<span class="number">0.5</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=<span class="number">50</span>;i++)&#123;</span><br><span class="line"><span class="keyword">double</span> t=<span class="number">1.0</span>/i;</span><br><span class="line">p[i]=t;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">2</span>;j&lt;i;j++)&#123;</span><br><span class="line">p[i]+=t*p[i-j+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">double</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">ans+=p[i];</span><br><span class="line">&#125;</span><br><span class="line">ans=ans/m; </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case #%d: %.6lf %0.6lf\n"</span>,kase++,p[n],ans);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="F-Moving-On"><a href="#F-Moving-On" class="headerlink" title="F.Moving On"></a>F.Moving On</h3><h3 id="题意-4"><a href="#题意-4" class="headerlink" title="题意"></a>题意</h3><p>给你一个n个点的有向完全图，每个点有点权ri，有Q组 询问，每次询问给出三个参数u,v,w，要求u到v的最短路，且要求途径的点的点权不能超过w（也就是点的点权&lt;=w），让你输出这个最短路的权值。（n&lt;=200,w&lt;=1e5,q&lt;=2e4）</p><h3 id="细节-4"><a href="#细节-4" class="headerlink" title="细节"></a>细节</h3><p>将各城市的危险值从小到大排序，dp[ i ] [ j ] [ k ]表示从城市i到城市j借助排序后的前k个城市可以取到的最小距离，所以状态转换方程为</p><p><code>dp[i][j][k] = min(dp[i][j][k-1], dp[i][name[k]][k-1] + dp[name[k]][j][k-1])</code></p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p class=&quot;description&quot;&gt;&lt;/p&gt;&lt;br&gt;2018CCPC银川网络赛&lt;p&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>hdu1875</title>
    <link href="https://yuanfang.tech/2019/08/22/hdu1875.html"/>
    <id>https://yuanfang.tech/2019/08/22/hdu1875.html</id>
    <published>2019-08-22T11:28:54.000Z</published>
    <updated>2019-08-22T11:58:56.754Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p></p><p class="description"></p><br>hdu1875,建图求最小生成树<p></p><a id="more"></a><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1875" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=1875</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>t组数据</p><p>n个点，接下来n行是每个点的坐标</p><p>小于10和大于1000的距离不符合要求</p><p>输出最小生成树</p><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><p>最后结果要乘100</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">110</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span>&#123;</span></span><br><span class="line"><span class="keyword">double</span> x,y; </span><br><span class="line">&#125;p[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> u,v;</span><br><span class="line"><span class="keyword">double</span> w;</span><br><span class="line">&#125;e[maxn*maxn];</span><br><span class="line"><span class="keyword">int</span> parent[maxn];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(edge a,edge b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.w&lt;b.w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">parent[i]=i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_set</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k, i, r = x;</span><br><span class="line">    <span class="keyword">while</span>(parent[r] != r) &#123;</span><br><span class="line">        r = parent[r];</span><br><span class="line">    &#125;</span><br><span class="line">    k = x;</span><br><span class="line">    <span class="keyword">while</span>(k != r) &#123;</span><br><span class="line">        i = parent[k];</span><br><span class="line">        parent[k] = r;</span><br><span class="line">        k = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> cou;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kruskal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">set</span>();</span><br><span class="line"><span class="keyword">int</span> i,j,cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">double</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;cou&amp;&amp;cnt&lt;n<span class="number">-1</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x=find_set(e[i].u);</span><br><span class="line"><span class="keyword">int</span> y=find_set(e[i].v);</span><br><span class="line"><span class="keyword">if</span>(x!=y)</span><br><span class="line">&#123;</span><br><span class="line">parent[x]=parent[y];</span><br><span class="line">cnt++;</span><br><span class="line">sum=sum+e[i].w;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(cnt==n<span class="number">-1</span>)<span class="built_in">printf</span>(<span class="string">"%.1lf\n"</span>,sum*<span class="number">100</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"oh!\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"><span class="keyword">while</span>(t--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>,&amp;p[i].x,&amp;p[i].y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">double</span> f;</span><br><span class="line">cou=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">&#123;</span><br><span class="line">f=<span class="built_in">sqrt</span>((p[i].x-p[j].x)*(p[i].x-p[j].x)+(p[i].y-p[j].y)*(p[i].y-p[j].y));</span><br><span class="line"><span class="keyword">if</span>(f&gt;=<span class="number">10</span>&amp;&amp;f&lt;=<span class="number">1000</span>)</span><br><span class="line">&#123;</span><br><span class="line">e[cou].w=f;</span><br><span class="line">e[cou].u=i;</span><br><span class="line">e[cou].v=j;</span><br><span class="line">cou++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sort(e,e+cou,cmp);</span><br><span class="line">kruskal();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p class=&quot;description&quot;&gt;&lt;/p&gt;&lt;br&gt;hdu1875,建图求最小生成树&lt;p&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="poj" scheme="https://yuanfang.tech/categories/poj/"/>
    
    
      <category term="kuangbin" scheme="https://yuanfang.tech/tags/kuangbin/"/>
    
      <category term="kruskal" scheme="https://yuanfang.tech/tags/kruskal/"/>
    
      <category term="poj" scheme="https://yuanfang.tech/tags/poj/"/>
    
  </entry>
  
  <entry>
    <title>hdu1301</title>
    <link href="https://yuanfang.tech/2019/08/22/hdu1301.html"/>
    <id>https://yuanfang.tech/2019/08/22/hdu1301.html</id>
    <published>2019-08-22T10:41:14.000Z</published>
    <updated>2019-08-22T10:44:34.534Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p></p><p class="description"></p><br>hdu1301,最小生成树，水<p></p><a id="more"></a><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1301" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=1301</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>T个城镇</p><p>城镇名a、与城镇连接的城镇数n、接下来n组是与a连接的城镇名和距离</p><p>求最小生成树</p><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><p>(ˉ▽ˉ；)…输入有点麻烦，用cin比较方便</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">10010</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> u,v,w;</span><br><span class="line">&#125;e[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> parent[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(edge a,edge b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.w&lt;b.w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=t;i++)</span><br><span class="line">&#123;</span><br><span class="line">parent[i]=i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_set</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k, i, r = x;</span><br><span class="line">    <span class="keyword">while</span>(parent[r] != r) &#123;</span><br><span class="line">        r = parent[r];</span><br><span class="line">    &#125;</span><br><span class="line">    k = x;</span><br><span class="line">    <span class="keyword">while</span>(k != r) &#123;</span><br><span class="line">        i = parent[k];</span><br><span class="line">        parent[k] = r;</span><br><span class="line">        k = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kruskal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">set</span>();</span><br><span class="line"><span class="keyword">int</span> i,j,cnt=<span class="number">0</span>,sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m&amp;&amp;cnt&lt;t<span class="number">-1</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x=find_set(e[i].u);</span><br><span class="line"><span class="keyword">int</span> y=find_set(e[i].v);</span><br><span class="line"><span class="keyword">if</span>(x!=y)</span><br><span class="line">&#123;</span><br><span class="line">parent[x]=parent[y];</span><br><span class="line">cnt++;</span><br><span class="line">sum=sum+e[i].w;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t),t)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> a;</span><br><span class="line"><span class="keyword">int</span> n,i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;t;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a&gt;&gt;n;</span><br><span class="line"><span class="keyword">while</span>(n--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> b;<span class="keyword">int</span> c;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;b&gt;&gt;c;</span><br><span class="line">e[i].u=a-<span class="string">'A'</span>+<span class="number">1</span>;</span><br><span class="line">e[i].v=b-<span class="string">'A'</span>+<span class="number">1</span>;</span><br><span class="line">e[i].w=c;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">m=i;</span><br><span class="line">sort(e,e+m,cmp);</span><br><span class="line">kruskal();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p class=&quot;description&quot;&gt;&lt;/p&gt;&lt;br&gt;hdu1301,最小生成树，水&lt;p&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="hdu" scheme="https://yuanfang.tech/tags/hdu/"/>
    
      <category term="kuangbin" scheme="https://yuanfang.tech/tags/kuangbin/"/>
    
      <category term="kruskal" scheme="https://yuanfang.tech/tags/kruskal/"/>
    
  </entry>
  
  <entry>
    <title>hdu1233</title>
    <link href="https://yuanfang.tech/2019/08/22/hdu1233.html"/>
    <id>https://yuanfang.tech/2019/08/22/hdu1233.html</id>
    <published>2019-08-22T10:24:19.000Z</published>
    <updated>2019-08-22T10:26:27.849Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p></p><p class="description"></p><br>hdu1233,标准最小生成树<p></p><a id="more"></a><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1233" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=1233</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>某省调查乡村交通状况，得到的统计表中列出了任意两村庄间的距离。</p><p>省政府“畅通工程”的目标是使全省任何两个村庄间都可以实现公路交通（但不一定有直接的公路相连，只要能间接通过公路可达即可），并要求铺设的公路总长度为最小。</p><p>请计算最小的公路总长度。</p><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><p>(ˉ▽ˉ；)…</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">10010</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> u,v,w;</span><br><span class="line">&#125;e[maxn];</span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"><span class="keyword">int</span> parent[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(edge a,edge b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.w&lt;b.w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">parent[i]=i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_set</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k, i, r = x;</span><br><span class="line">    <span class="keyword">while</span>(parent[r] != r) &#123;</span><br><span class="line">        r = parent[r];</span><br><span class="line">    &#125;</span><br><span class="line">    k = x;</span><br><span class="line">    <span class="keyword">while</span>(k != r) &#123;</span><br><span class="line">        i = parent[k];</span><br><span class="line">        parent[k] = r;</span><br><span class="line">        k = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kruskal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">set</span>();</span><br><span class="line"><span class="keyword">int</span> i,j,cnt=<span class="number">0</span>,sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;k&amp;&amp;cnt&lt;n<span class="number">-1</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x=find_set(e[i].u);</span><br><span class="line"><span class="keyword">int</span> y=find_set(e[i].v);</span><br><span class="line"><span class="keyword">if</span>(x!=y)</span><br><span class="line">&#123;</span><br><span class="line">parent[x]=parent[y];</span><br><span class="line">cnt++;</span><br><span class="line">sum=sum+e[i].w;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n),n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">k=n*(n<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;k;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;e[i].u,&amp;e[i].v,&amp;e[i].w);</span><br><span class="line">&#125;</span><br><span class="line">sort(e,e+k,cmp);</span><br><span class="line">kruskal();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p class=&quot;description&quot;&gt;&lt;/p&gt;&lt;br&gt;hdu1233,标准最小生成树&lt;p&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="hdu" scheme="https://yuanfang.tech/tags/hdu/"/>
    
      <category term="kuangbin" scheme="https://yuanfang.tech/tags/kuangbin/"/>
    
      <category term="kruskal" scheme="https://yuanfang.tech/tags/kruskal/"/>
    
  </entry>
  
  <entry>
    <title>poj1679</title>
    <link href="https://yuanfang.tech/2019/08/22/poj1679.html"/>
    <id>https://yuanfang.tech/2019/08/22/poj1679.html</id>
    <published>2019-08-22T09:20:59.000Z</published>
    <updated>2019-08-22T09:48:46.054Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p></p><p class="description"></p><br>poj1679,次小生成树<p></p><a id="more"></a><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="http://poj.org/problem?id=1679" target="_blank" rel="noopener">http://poj.org/problem?id=1679</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>判断求出的最小生成树唯不唯一，唯一输出最小的权值，否者输出Not unique!</p><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><p>用Kruskal 算出最小生成树的值，并记录每一条边，然后枚举去掉这些边</p><p>看其是否也能构成最小生成树且值相同。</p><p>注意 <strong>在删边后，可能图构不成一棵树，得判断一下</strong></p><p>debug了很久，最后发现是数据开小了= =</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">11000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> parent[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> u,v,w;</span><br><span class="line">&#125;e[maxn];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(edge a,edge b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.w&lt;b.w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">        parent[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_set</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k, i, r = x;</span><br><span class="line">    <span class="keyword">while</span>(parent[r] != r) &#123;</span><br><span class="line">        r = parent[r];</span><br><span class="line">    &#125;</span><br><span class="line">    k = x;</span><br><span class="line">    <span class="keyword">while</span>(k != r) &#123;</span><br><span class="line">        i = parent[k];</span><br><span class="line">        parent[k] = r;</span><br><span class="line">        k = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kruskal</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, x, y,cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> sum;</span><br><span class="line">    <span class="built_in">set</span>();</span><br><span class="line">    <span class="keyword">int</span> b[maxn];</span><br><span class="line">    <span class="keyword">for</span>(sum = <span class="number">0</span>, i = <span class="number">0</span>; i &lt; m&amp;&amp;cnt&lt;n<span class="number">-1</span>; i++) &#123;</span><br><span class="line">        x = find_set(e[i].u);</span><br><span class="line">        y = find_set(e[i].v);</span><br><span class="line">        <span class="keyword">if</span>(x == y)<span class="keyword">continue</span>;</span><br><span class="line">        parent[x] = parent[y]; ++cnt;</span><br><span class="line">        sum=sum+e[i].w;</span><br><span class="line">b[cnt]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    <span class="keyword">int</span> k,ans=sum;</span><br><span class="line">    k=cnt;</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=k;j++)</span><br><span class="line">    &#123;</span><br><span class="line">    cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">set</span>();</span><br><span class="line">    <span class="keyword">for</span>(sum = <span class="number">0</span>, i = <span class="number">0</span>; i &lt; m&amp;&amp;cnt&lt;n<span class="number">-1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(b[j]==i)<span class="keyword">continue</span>;</span><br><span class="line">        x = find_set(e[i].u);</span><br><span class="line">        y = find_set(e[i].v);</span><br><span class="line">        <span class="keyword">if</span>(x == y)<span class="keyword">continue</span>;</span><br><span class="line">        parent[x] = parent[y]; ++cnt;</span><br><span class="line">        sum=sum+e[i].w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(cnt==n<span class="number">-1</span>&amp;&amp;sum==ans)<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"><span class="keyword">while</span>(t--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;e[i].u,&amp;e[i].v,&amp;e[i].w);</span><br><span class="line">&#125;</span><br><span class="line">sort(e,e+m,cmp);</span><br><span class="line"><span class="keyword">int</span> ans=kruskal(n);</span><br><span class="line"><span class="keyword">if</span>(ans==<span class="number">-1</span>)<span class="built_in">printf</span>(<span class="string">"Not Unique!\n"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p class=&quot;description&quot;&gt;&lt;/p&gt;&lt;br&gt;poj1679,次小生成树&lt;p&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="poj" scheme="https://yuanfang.tech/categories/poj/"/>
    
    
      <category term="kuangbin" scheme="https://yuanfang.tech/tags/kuangbin/"/>
    
      <category term="kruskal" scheme="https://yuanfang.tech/tags/kruskal/"/>
    
      <category term="poj" scheme="https://yuanfang.tech/tags/poj/"/>
    
  </entry>
  
  <entry>
    <title>poj3087</title>
    <link href="https://yuanfang.tech/2019/08/16/poj3087.html"/>
    <id>https://yuanfang.tech/2019/08/16/poj3087.html</id>
    <published>2019-08-16T09:15:26.000Z</published>
    <updated>2019-08-16T09:17:48.938Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p></p><p class="description"></p><br>poj3087,模拟<p></p><a id="more"></a><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="http://poj.org/problem?id=3087" target="_blank" rel="noopener">http://poj.org/problem?id=3087</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>已知两堆牌s1和s2的初始状态， 其牌数均为c，按给定规则能将他们相互交叉组合成一堆牌s12，再将s12的最底下的c块牌归为s1，最顶的c块牌归为s2，依此循环下去。</p><p> 现在输入s1和s2的初始状态 以及 预想的最终状态s12</p><p>问s1 s2经过多少次洗牌之后，最终能达到状态s12，若永远不可能相同，则输出”-1”。</p><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><p>直接模拟就可以了，关键在于状态记录，然后判重</p><p>若s1和s2在洗牌后的状态，是前面洗牌时已经出现过的一个状态，且这个状态不是预想的状态S12，就说明无论怎样再洗牌都不可能达到S12了，因为这个洗牌操作已经陷入了一个“环”</p><p>如果状态没有重复过，则一直模拟洗牌，直至s12出现</p><p>记录状态可以用map<string,bool>vist</string,bool></p><p><strong>Map的缺省值为0</strong></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">210</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> test,t,n,i;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;test);</span><br><span class="line"><span class="keyword">for</span>(t=<span class="number">1</span>;t&lt;=test;t++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">char</span> s1[maxn],s2[maxn],s12[maxn*<span class="number">2</span>];</span><br><span class="line">gets(s1);</span><br><span class="line">gets(s2);</span><br><span class="line">gets(s12);</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">bool</span>&gt;vis;</span><br><span class="line">vis[s12]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> s[maxn*<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">s[k++]=s2[i];</span><br><span class="line">s[k++]=s1[i];</span><br><span class="line">&#125;</span><br><span class="line">s[k]=<span class="string">'\0'</span>;</span><br><span class="line">ans++;</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">strcmp</span>(s,s12))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,t,ans);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(vis[s]&amp;&amp;<span class="built_in">strcmp</span>(s,s12))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d -1\n"</span>,t);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">vis[s]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">s1[i]=s[i];</span><br><span class="line">&#125;s1[i]=<span class="string">'\0'</span>;</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">0</span>;i&lt;<span class="number">2</span>*n;i++)</span><br><span class="line">&#123;</span><br><span class="line">s2[k++]=s[i];</span><br><span class="line">&#125;</span><br><span class="line">s2[i]=<span class="string">'\0'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p class=&quot;description&quot;&gt;&lt;/p&gt;&lt;br&gt;poj3087,模拟&lt;p&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="poj" scheme="https://yuanfang.tech/categories/poj/"/>
    
    
      <category term="kuangbin" scheme="https://yuanfang.tech/tags/kuangbin/"/>
    
      <category term="poj" scheme="https://yuanfang.tech/tags/poj/"/>
    
      <category term="模拟" scheme="https://yuanfang.tech/tags/%E6%A8%A1%E6%8B%9F/"/>
    
  </entry>
  
  <entry>
    <title>poj3126</title>
    <link href="https://yuanfang.tech/2019/08/16/poj3126.html"/>
    <id>https://yuanfang.tech/2019/08/16/poj3126.html</id>
    <published>2019-08-16T08:47:47.000Z</published>
    <updated>2019-08-16T08:50:26.855Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p></p><p class="description"></p><br>poj3126,素数判断+bfs<p></p><a id="more"></a><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="http://poj.org/problem?id=3126" target="_blank" rel="noopener">http://poj.org/problem?id=3126</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给出n，m两个四位素数，n一次只能变换一位</p><p>问n最少变换几次可以变成m</p><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><p>因为只有四位素数，因此先给四位素数打个表</p><p>然后bfs</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">bool</span> prime[<span class="number">10010</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isprime</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">0</span> || n == <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">2</span> || n == <span class="number">3</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(n%<span class="number">6</span> != <span class="number">1</span> &amp;&amp; n%<span class="number">6</span> != <span class="number">5</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">int</span> t = <span class="built_in">sqrt</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">5</span>; i &lt;= t; i+=<span class="number">6</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n%i == <span class="number">0</span> || n%(i+<span class="number">2</span>) == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,s;</span><br><span class="line">&#125;f;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">10010</span>];</span><br><span class="line"><span class="built_in">queue</span> &lt;node&gt;q;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">q.push(f);</span><br><span class="line">vis[f.x]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line">node u=q.front();</span><br><span class="line"><span class="comment">//printf("%d\n",u.x);</span></span><br><span class="line"><span class="keyword">if</span>(u.x==m)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,u.s);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125; </span><br><span class="line">q.pop();</span><br><span class="line">node k;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">k.x=u.x/<span class="number">10</span>*<span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(prime[k.x+i]&amp;&amp;k.x+i!=u.x&amp;&amp;vis[k.x+i]!=<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">k.x=k.x+i;</span><br><span class="line">k.s=u.s+<span class="number">1</span>;</span><br><span class="line">q.push(k);</span><br><span class="line">vis[k.x]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">k.x=u.x/<span class="number">100</span>*<span class="number">100</span>+u.x%<span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span>(prime[k.x+i*<span class="number">10</span>]&amp;&amp;k.x+i*<span class="number">10</span>!=u.x&amp;&amp;vis[k.x+i*<span class="number">10</span>]!=<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">k.x=k.x+i*<span class="number">10</span>;</span><br><span class="line">k.s=u.s+<span class="number">1</span>;</span><br><span class="line">q.push(k);</span><br><span class="line">vis[k.x]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">k.x=u.x/<span class="number">1000</span>*<span class="number">1000</span>+(u.x%<span class="number">1000</span>)%<span class="number">100</span>;</span><br><span class="line"><span class="keyword">if</span>(prime[k.x+i*<span class="number">100</span>]&amp;&amp;k.x+i*<span class="number">100</span>!=u.x&amp;&amp;vis[k.x+i*<span class="number">100</span>]!=<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">k.x=k.x+i*<span class="number">100</span>;</span><br><span class="line">k.s=u.s+<span class="number">1</span>;</span><br><span class="line">q.push(k);</span><br><span class="line">vis[k.x]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">k.x=u.x%<span class="number">1000</span>;</span><br><span class="line"><span class="keyword">if</span>(prime[k.x+i*<span class="number">1000</span>]&amp;&amp;k.x+i*<span class="number">1000</span>!=u.x&amp;&amp;vis[k.x+i*<span class="number">1000</span>]!=<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">k.x=k.x+i*<span class="number">1000</span>;</span><br><span class="line">k.s=u.s+<span class="number">1</span>;</span><br><span class="line">q.push(k);</span><br><span class="line">vis[k.x]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,t;</span><br><span class="line"><span class="built_in">memset</span>(prime,<span class="literal">false</span>,<span class="keyword">sizeof</span>(prime));</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1000</span>;i&lt;=<span class="number">9999</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(isprime(i))prime[i]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"><span class="keyword">while</span>(t--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="literal">false</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line"><span class="keyword">while</span>(!q.empty())q.pop();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">f.x=n;</span><br><span class="line">f.s=<span class="number">0</span>;</span><br><span class="line">bfs();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p class=&quot;description&quot;&gt;&lt;/p&gt;&lt;br&gt;poj3126,素数判断+bfs&lt;p&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="poj" scheme="https://yuanfang.tech/categories/poj/"/>
    
    
      <category term="kuangbin" scheme="https://yuanfang.tech/tags/kuangbin/"/>
    
      <category term="poj" scheme="https://yuanfang.tech/tags/poj/"/>
    
      <category term="bfs" scheme="https://yuanfang.tech/tags/bfs/"/>
    
  </entry>
  
  <entry>
    <title>朴素的素数判断</title>
    <link href="https://yuanfang.tech/2019/08/16/%E6%9C%B4%E7%B4%A0%E7%9A%84%E7%B4%A0%E6%95%B0%E5%88%A4%E6%96%AD.html"/>
    <id>https://yuanfang.tech/2019/08/16/朴素的素数判断.html</id>
    <published>2019-08-16T07:53:10.000Z</published>
    <updated>2019-08-16T08:14:02.533Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p></p><p class="description"></p><p></p><h2 id="朴素的素数判断"><a href="#朴素的素数判断" class="headerlink" title="朴素的素数判断"></a>朴素的素数判断</h2><p>适用范围：n&lt;=1e9</p><p>大数见:<a href="/2019/08/16/Miller-Rabin.html">Miller-Rabin</a></p><p><img src="https://lmf424.oss-cn-beijing.aliyuncs.com/xiangcai.gif" alt></p><a id="more"></a><h2 id="普通版：O-sqrt-n"><a href="#普通版：O-sqrt-n" class="headerlink" title="普通版：O(sqrt(n))"></a>普通版：O(sqrt(n))</h2><p> i  从 2 到 sqrt（n） ，一个一个 判断，是不是 n 的因数，</p><p>稍微优化一下，当 i &gt; 2 时，只需要判断 i 是奇数的情况。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isprime</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t = <span class="built_in">sqrt</span>(n);</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">2</span> || n == <span class="number">3</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= t; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i &gt; <span class="number">2</span> &amp;&amp; (i&amp;<span class="number">1</span>) == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(n%i == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="豪华版-：O-sqrt-n-3"><a href="#豪华版-：O-sqrt-n-3" class="headerlink" title="豪华版 ：O(sqrt(n) / 3)"></a>豪华版 ：O(sqrt(n) / 3)</h2><p>实际做题的话要更快</p><p>经过观察，<strong>所有的素数都分布在 6 的倍数 两侧 （2 ，3 除外）。</strong></p><p>所以 （n % 6 ！= 1） &amp;&amp;（ n % 6 ！= 5） 的 一定不是素数。</p><p>当然满足条件的也<strong>可能不是素数</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isprime</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">0</span> || n == <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">2</span> || n == <span class="number">3</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(n%<span class="number">6</span> != <span class="number">1</span> &amp;&amp; n%<span class="number">6</span> != <span class="number">5</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">int</span> t = <span class="built_in">sqrt</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">5</span>; i &lt;= t; i+=<span class="number">6</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n%i == <span class="number">0</span> || n%(i+<span class="number">2</span>) == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="欧拉筛打表-O-n"><a href="#欧拉筛打表-O-n" class="headerlink" title="欧拉筛打表 O( n )"></a>欧拉筛打表 O( n )</h2><p>注意这里的 O（ n ） ,的 n 是打表的长度，比如，找出 1~n 的 所有素数，</p><p>显然，n 为 1e9 的话是不可能打表的，就算能也是会超时的，</p><p>如果用欧拉筛来判断一个 1e9 的数是否是素数，只需要大概打表到 <code>3e4</code> 就可以了！！！！！！！</p><p>因为：</p><p>任意一个数 n 都可以表示成若干质数的乘积，所以对于一个 1e9 的数 n ，先求出1~sqrt( 1e9 ) 的所有质数</p><p>（ sqrt( 1e9 ) = 31628 ）</p><p>再用 n 一个一个与这些质数比较 ， 如果这些质数中没有 n 的因数， 那么 n 一定是一个质数！</p><p>因为 1~sqrt（n） 中没有 n 的质因数的话，&gt; sqrt(n) 中一定没有 n 的因数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">31628</span>; </span><br><span class="line"><span class="keyword">int</span> prm[MAXN+<span class="number">1</span>],vis[MAXN+<span class="number">1</span>], cnt = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= MAXN; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i]) prm[cnt++] = i; <span class="comment">// 没有被标记的就是素数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cnt; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            LL t = i*prm[j];</span><br><span class="line">            <span class="keyword">if</span>(t &gt; MAXN) <span class="keyword">break</span>;</span><br><span class="line">            vis[t] = <span class="number">1</span>;   </span><br><span class="line">            <span class="keyword">if</span>(i%prm[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isprime</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n &lt;= MAXN)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(vis[n] == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cnt; i++)</span><br><span class="line">            <span class="keyword">if</span>(n%prm[i] == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的if(i % prim[j] == 0 ) break;   是完成上面要求的重要条件</p><p>我们首先知道一个合数一定可以表示成素数的乘积，那么也一定可以表示成他的最小质因数乘以另外一个数，已知prim数组中的素数是依次递增的，</p><p>当i满足i%prim[j] ==  0的时候，</p><p>假如我们继续执行，那么下一个要判断为不是质数的数为：prim[j+1]*i  </p><p>但是我们发现这个数的最小质因数一定是prim[j] ，因为这里的i满足i%prim[j] == 0 ，prim[j]是他的最小质因数，所以这里就和我们上面的要求有矛盾，</p><p>当我们遇到后面x满足：prim[j] <em> x = prim[j+1]</em>i时，又会重新判断一次这个数字</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p class=&quot;description&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;h2 id=&quot;朴素的素数判断&quot;&gt;&lt;a href=&quot;#朴素的素数判断&quot; class=&quot;headerlink&quot; title=&quot;朴素的素数判断&quot;&gt;&lt;/a&gt;朴素的素数判断&lt;/h2&gt;&lt;p&gt;适用范围：n&amp;lt;=1e9&lt;/p&gt;
&lt;p&gt;大数见:&lt;a href=&quot;/2019/08/16/Miller-Rabin.html&quot;&gt;Miller-Rabin&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lmf424.oss-cn-beijing.aliyuncs.com/xiangcai.gif&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="algorithm" scheme="https://yuanfang.tech/categories/algorithm/"/>
    
    
      <category term="prime" scheme="https://yuanfang.tech/tags/prime/"/>
    
  </entry>
  
  <entry>
    <title>Miller-Rabin</title>
    <link href="https://yuanfang.tech/2019/08/16/Miller-Rabin.html"/>
    <id>https://yuanfang.tech/2019/08/16/Miller-Rabin.html</id>
    <published>2019-08-16T07:12:33.000Z</published>
    <updated>2019-08-16T07:49:20.779Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p></p><p class="description"></p><p></p><h2 id="Miller-Rabin素数测试算法"><a href="#Miller-Rabin素数测试算法" class="headerlink" title="Miller-Rabin素数测试算法"></a>Miller-Rabin素数测试算法</h2><p>有时候我们想快速的知道一个数是不是素数，而这个数又特别的大导致 O （√n）的算法不能通过，这时候我们可以对其进行 Miller-Rabin 素数测试，可以<strong>大概率</strong>测出其是否为素数。</p><p>转载自forever_dreamsd大佬:<a href="https://blog.csdn.net/forever_dreams/article/details/82314237" target="_blank" rel="noopener">Miller-Rabin素数测试算法</a></p><a id="more"></a><h2 id="基础理论"><a href="#基础理论" class="headerlink" title="基础理论"></a>基础理论</h2><p><img src="Miller-Rabin\1565940377100.png" alt="1565940377100"></p><blockquote id="fn_Carmichael数"><sup>Carmichael数</sup>. 每个Carmichael至少是三个不同素数的乘积。如561=3<em> 11 </em>17。前3个Carmichael数是561,1105,1729。Carmichael数是非常少的。在1~100000000范围内的整数中，只有255个Carmichael数。<a href="#reffn_Carmichael数" title="Jump back to footnote [Carmichael数] in the text."> &#8617;</a></blockquote><h2 id="基础理论证明"><a href="#基础理论证明" class="headerlink" title="基础理论证明"></a>基础理论证明</h2><p><img src="Miller-Rabin\20180902152616155.jfif" alt="img"></p><h2 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h2><p><img src="Miller-Rabin\1565941020088.png" alt="1565941020088"></p><h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><p><img src="Miller-Rabin\1565941050512.png" alt="1565941050512"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> prime[<span class="number">10</span>]=&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">17</span>,<span class="number">19</span>,<span class="number">23</span>,<span class="number">29</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Quick_Multiply</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c)</span>  <span class="comment">//快速积（和快速幂差不多） </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>,res=a;</span><br><span class="line">    <span class="keyword">while</span>(b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>)</span><br><span class="line">          ans=(ans+res)%c;</span><br><span class="line">        res=(res+res)%c;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>)ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Quick_Power</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c)</span>     <span class="comment">//快速幂，这里就不赘述了 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">1</span>,res=a;</span><br><span class="line">    <span class="keyword">while</span>(b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>)</span><br><span class="line">          ans=Quick_Multiply(ans,res,c);</span><br><span class="line">        res=Quick_Multiply(res,res,c);</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Miller_Rabin</span><span class="params">(<span class="keyword">int</span> x)</span>     <span class="comment">//判断素数 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,k;</span><br><span class="line">    <span class="keyword">int</span> s=<span class="number">0</span>,t=x<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x==<span class="number">2</span>)  <span class="keyword">return</span> <span class="literal">true</span>;   <span class="comment">//2是素数 </span></span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">2</span>||!(x&amp;<span class="number">1</span>))  <span class="keyword">return</span> <span class="literal">false</span>;     <span class="comment">//如果x是偶数或者是0,1，那它不是素数 </span></span><br><span class="line">    <span class="keyword">while</span>(!(t&amp;<span class="number">1</span>))  <span class="comment">//将x分解成(2^s)*t的样子 </span></span><br><span class="line">    &#123;</span><br><span class="line">        s++;</span><br><span class="line">        t&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>&amp;&amp;prime[i]&lt;x;++i)      <span class="comment">//随便选一个素数进行测试 </span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> a=prime[i];</span><br><span class="line">        <span class="keyword">int</span> b=Quick_Power(a,t,x);      <span class="comment">//先算出a^t</span></span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=s;++j)    <span class="comment">//然后进行s次平方 </span></span><br><span class="line">        &#123;</span><br><span class="line">            k=Quick_Multiply(b,b,x);   <span class="comment">//求b的平方 </span></span><br><span class="line">            <span class="keyword">if</span>(k==<span class="number">1</span>&amp;&amp;b!=<span class="number">1</span>&amp;&amp;b!=x<span class="number">-1</span>)     <span class="comment">//用二次探测判断 </span></span><br><span class="line">              <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            b=k;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(b!=<span class="number">1</span>)  <span class="keyword">return</span> <span class="literal">false</span>;   <span class="comment">//用费马小定律判断 </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;   <span class="comment">//如果进行多次测试都是对的，那么x就很有可能是素数 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">    <span class="keyword">if</span>(Miller_Rabin(x))  <span class="built_in">printf</span>(<span class="string">"Yes"</span>);</span><br><span class="line">    <span class="keyword">else</span>  <span class="built_in">printf</span>(<span class="string">"No"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p class=&quot;description&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;h2 id=&quot;Miller-Rabin素数测试算法&quot;&gt;&lt;a href=&quot;#Miller-Rabin素数测试算法&quot; class=&quot;headerlink&quot; title=&quot;Miller-Rabin素数测试算法&quot;&gt;&lt;/a&gt;Miller-Rabin素数测试算法&lt;/h2&gt;&lt;p&gt;有时候我们想快速的知道一个数是不是素数，而这个数又特别的大导致 O （√n）的算法不能通过，这时候我们可以对其进行 Miller-Rabin 素数测试，可以&lt;strong&gt;大概率&lt;/strong&gt;测出其是否为素数。&lt;/p&gt;
&lt;p&gt;转载自forever_dreamsd大佬:&lt;a href=&quot;https://blog.csdn.net/forever_dreams/article/details/82314237&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Miller-Rabin素数测试算法&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="algorithm" scheme="https://yuanfang.tech/categories/algorithm/"/>
    
    
      <category term="Miller-Rabin" scheme="https://yuanfang.tech/tags/Miller-Rabin/"/>
    
  </entry>
  
  <entry>
    <title>poj1426</title>
    <link href="https://yuanfang.tech/2019/08/16/poj1426.html"/>
    <id>https://yuanfang.tech/2019/08/16/poj1426.html</id>
    <published>2019-08-15T19:42:02.000Z</published>
    <updated>2019-08-15T19:47:29.880Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p></p><p class="description"></p><br>poj1426,bfs/dfs/bfs+同余模定理<p></p><a id="more"></a><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="http://poj.org/problem?id=1426" target="_blank" rel="noopener">http://poj.org/problem?id=1426</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给出一个整数n，(1 &lt;= n &lt;= 200)。求出任意一个它的倍数m，要求m必须只由十进制的’0’或’1’组成。</p><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><p>基础是1，入口为x10和x10+1</p><p>bfs:360ms</p><p>dfs:141ms</p><p>dfs+同余模定理:32ms(大佬tql)</p><p>详解：<a href="https://blog.csdn.net/lyy289065406/article/details/6647917" target="_blank" rel="noopener">https://blog.csdn.net/lyy289065406/article/details/6647917</a></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> flag;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> t,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(flag==<span class="number">1</span>)<span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">if</span>(t%n==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">flag=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%llu\n"</span>,t);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(k==<span class="number">19</span>)<span class="keyword">return</span> ;</span><br><span class="line">dfs(t*<span class="number">10</span>,k+<span class="number">1</span>);</span><br><span class="line">dfs(t*<span class="number">10</span>+<span class="number">1</span>,k+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span>&gt;q;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> k;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())q.pop();</span><br><span class="line">q.push(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line">k=q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">if</span>(k%n==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%llu\n"</span>,k);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(k*<span class="number">10</span>&lt;=<span class="number">1e19</span>)</span><br><span class="line">q.push(k*<span class="number">10</span>);</span><br><span class="line">q.push(k*<span class="number">10</span>+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF&amp;&amp;n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//dfs(1,0);</span></span><br><span class="line">bfs(n);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dalao的代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> mod[<span class="number">524286</span>];  <span class="comment">//保存每次mod n的余数</span></span><br><span class="line">                  <span class="comment">//由于198的余数序列是最长的</span></span><br><span class="line">                  <span class="comment">//经过反复二分验证，436905是能存储198余数序列的最少空间</span></span><br><span class="line">                  <span class="comment">//但POJ肯定又越界测试了...524286是AC的最低下限，不然铁定RE</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!n)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"> </span><br><span class="line">mod[<span class="number">1</span>]=<span class="number">1</span>%n;  <span class="comment">//初始化，n倍数的最高位必是1</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">2</span>;mod[i<span class="number">-1</span>]!=<span class="number">0</span>;i++)  <span class="comment">//利用同余模定理，从前一步的余数mod[i/2]得到下一步的余数mod[i]</span></span><br><span class="line">mod[i]=(mod[i/<span class="number">2</span>]*<span class="number">10</span>+i%<span class="number">2</span>)%n;</span><br><span class="line">             <span class="comment">//mod[i/2]*10+i%2模拟了BFS的双入口搜索</span></span><br><span class="line">             <span class="comment">//当i为偶数时，+0，即取当前位数字为0  。为奇数时，则+1,即取当前位数字为1</span></span><br><span class="line"> </span><br><span class="line">i--;</span><br><span class="line"><span class="keyword">int</span> pm=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(i)</span><br><span class="line">&#123;</span><br><span class="line">mod[pm++]=i%<span class="number">2</span>;   <span class="comment">//把*10操作转化为%2操作，逆向求倍数的每一位数字</span></span><br><span class="line">i/=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(pm)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;mod[--pm];  <span class="comment">//倒序输出</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p class=&quot;description&quot;&gt;&lt;/p&gt;&lt;br&gt;poj1426,bfs/dfs/bfs+同余模定理&lt;p&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="poj" scheme="https://yuanfang.tech/categories/poj/"/>
    
    
      <category term="kuangbin" scheme="https://yuanfang.tech/tags/kuangbin/"/>
    
      <category term="poj" scheme="https://yuanfang.tech/tags/poj/"/>
    
      <category term="dfs" scheme="https://yuanfang.tech/tags/dfs/"/>
    
      <category term="bfs" scheme="https://yuanfang.tech/tags/bfs/"/>
    
  </entry>
  
  <entry>
    <title>poj3279</title>
    <link href="https://yuanfang.tech/2019/08/16/poj3279.html"/>
    <id>https://yuanfang.tech/2019/08/16/poj3279.html</id>
    <published>2019-08-15T19:11:35.000Z</published>
    <updated>2019-08-15T19:18:13.304Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p></p><p class="description"></p><br>poj3279,二进制搜索<p></p><a id="more"></a><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="http://poj.org/problem?id=3279" target="_blank" rel="noopener">http://poj.org/problem?id=3279</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>有一个m*n的棋盘，每个格子上是0或1，每次可以对一个格子做一次翻转操作，将被操作的格子和上下左右4个格子的0/1翻转。</p><p>问最少做多少次翻转可以将所有格子翻转成0，输出翻转方案。没有方案时输出“IMPOSSIBLE”。</p><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><p>啊以前写过的题目= =再写一遍给我wa成了傻子</p><p>棋盘的每一行都会影响到下一行的反转，因此只需要穷举第一排所有的反转方式就好了</p><p>然后判断下最后一排是不是全翻转成0了就好</p><p>要输出最少的翻转次数，所以要记录一下最小翻转次数（就是这里）</p><p>弄了好久才发现= =</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//官方数据：</span></span><br><span class="line"><span class="number">7</span> <span class="number">8</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="comment">//它的答案是：（26步）</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//一开始我只按照字典序就算了个这个答案= =（30步）</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> </span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> </span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> </span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> </span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">20</span>][<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> e[<span class="number">20</span>][<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> ans[<span class="number">20</span>][<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> finalans[<span class="number">20</span>][<span class="number">20</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x==<span class="number">1</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">map</span>[i][j]=e[i][j];</span><br><span class="line">ans[i][j]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">&#123;</span><br><span class="line">finalans[i][j]=ans[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pr</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;n;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,finalans[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,finalans[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f2</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=x;i++)</span><br><span class="line">&#123;</span><br><span class="line">ans=ans*<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> min,count;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,t,k,flag;</span><br><span class="line"><span class="keyword">bool</span> find=<span class="literal">false</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;m,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;e[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">&#123;</span><br><span class="line">finalans[i][j]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">min=inf;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;f2(n);i++)</span><br><span class="line">&#123;</span><br><span class="line">count=<span class="number">0</span>;</span><br><span class="line">t=i;</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">for</span>(j=n;j&gt;=<span class="number">1</span>;j--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(t%<span class="number">2</span>==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">ans[<span class="number">1</span>][j]=<span class="number">1</span>;</span><br><span class="line">count++;</span><br><span class="line"><span class="built_in">map</span>[<span class="number">1</span>][j]=fun(<span class="built_in">map</span>[<span class="number">1</span>][j]);</span><br><span class="line"><span class="built_in">map</span>[<span class="number">1</span>][j<span class="number">-1</span>]=fun(<span class="built_in">map</span>[<span class="number">1</span>][j<span class="number">-1</span>]);</span><br><span class="line"><span class="built_in">map</span>[<span class="number">1</span>][j+<span class="number">1</span>]=fun(<span class="built_in">map</span>[<span class="number">1</span>][j+<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">map</span>[<span class="number">2</span>][j]=fun(<span class="built_in">map</span>[<span class="number">2</span>][j]);</span><br><span class="line">&#125;</span><br><span class="line">t=t/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">2</span>;j&lt;=m;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">1</span>;k&lt;=n;k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">map</span>[j<span class="number">-1</span>][k]==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">ans[j][k]=<span class="number">1</span>;</span><br><span class="line">count++;</span><br><span class="line"><span class="built_in">map</span>[j][k]=fun(<span class="built_in">map</span>[j][k]);</span><br><span class="line"><span class="built_in">map</span>[j][k<span class="number">-1</span>]=fun(<span class="built_in">map</span>[j][k<span class="number">-1</span>]);</span><br><span class="line"><span class="built_in">map</span>[j][k+<span class="number">1</span>]=fun(<span class="built_in">map</span>[j][k+<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">map</span>[j+<span class="number">1</span>][k]=fun(<span class="built_in">map</span>[j+<span class="number">1</span>][k]);</span><br><span class="line"><span class="built_in">map</span>[j<span class="number">-1</span>][k]=fun(<span class="built_in">map</span>[j<span class="number">-1</span>][k]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">flag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">1</span>;k&lt;=n;k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">map</span>[m][k]==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">flag=<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(count&lt;min)</span><br><span class="line">&#123;</span><br><span class="line">min=count;</span><br><span class="line">solve();</span><br><span class="line">&#125;</span><br><span class="line">find=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(find)pr();</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"IMPOSSIBLE\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p class=&quot;description&quot;&gt;&lt;/p&gt;&lt;br&gt;poj3279,二进制搜索&lt;p&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="kuangbin" scheme="https://yuanfang.tech/tags/kuangbin/"/>
    
      <category term="poj" scheme="https://yuanfang.tech/tags/poj/"/>
    
      <category term="dfs" scheme="https://yuanfang.tech/tags/dfs/"/>
    
  </entry>
  
  <entry>
    <title>poj3278</title>
    <link href="https://yuanfang.tech/2019/08/16/poj3278.html"/>
    <id>https://yuanfang.tech/2019/08/16/poj3278.html</id>
    <published>2019-08-15T17:05:17.000Z</published>
    <updated>2019-08-15T17:07:24.818Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p></p><p class="description"></p><br>poj3278,标准bfs<p></p><a id="more"></a><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="http://poj.org/problem?id=3278" target="_blank" rel="noopener">http://poj.org/problem?id=3278</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>输入n，m</p><p>n可以进行+1，-1，*2三种操作</p><p>问最少进行多少次操作，n变成m</p><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><p>vis记录一下访问防止重复入队</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,t;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">queue</span>&lt;node&gt; q;</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">200010</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">node start;</span><br><span class="line">start.x=n;</span><br><span class="line">start.t=<span class="number">0</span>;</span><br><span class="line">q.push(start);</span><br><span class="line">vis[n]=<span class="literal">true</span>;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="literal">false</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line">node x,next;</span><br><span class="line">x=q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">if</span>(x.x==m)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,x.t);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(vis[x.x*<span class="number">2</span>]==<span class="literal">false</span>&amp;&amp;x.x*<span class="number">2</span>&lt;<span class="number">100010</span>)</span><br><span class="line">&#123;</span><br><span class="line">next.x=x.x*<span class="number">2</span>;</span><br><span class="line">next.t=x.t+<span class="number">1</span>;</span><br><span class="line">q.push(next);</span><br><span class="line">vis[x.x*<span class="number">2</span>]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(vis[x.x<span class="number">-1</span>]==<span class="literal">false</span>&amp;&amp;x.x<span class="number">-1</span>&gt;=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">next.x=x.x<span class="number">-1</span>;</span><br><span class="line">next.t=x.t+<span class="number">1</span>;</span><br><span class="line">q.push(next);</span><br><span class="line">vis[x.x<span class="number">-1</span>]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(vis[x.x+<span class="number">1</span>]==<span class="literal">false</span>&amp;&amp;x.x+<span class="number">1</span>&lt;<span class="number">100010</span>)</span><br><span class="line">&#123;</span><br><span class="line">next.x=x.x+<span class="number">1</span>;</span><br><span class="line">next.t=x.t+<span class="number">1</span>;</span><br><span class="line">q.push(next);</span><br><span class="line">vis[x.x+<span class="number">1</span>]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p class=&quot;description&quot;&gt;&lt;/p&gt;&lt;br&gt;poj3278,标准bfs&lt;p&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="poj" scheme="https://yuanfang.tech/categories/poj/"/>
    
    
      <category term="kuangbin" scheme="https://yuanfang.tech/tags/kuangbin/"/>
    
      <category term="poj" scheme="https://yuanfang.tech/tags/poj/"/>
    
      <category term="bfs" scheme="https://yuanfang.tech/tags/bfs/"/>
    
  </entry>
  
  <entry>
    <title>poj2251</title>
    <link href="https://yuanfang.tech/2019/08/16/poj2251.html"/>
    <id>https://yuanfang.tech/2019/08/16/poj2251.html</id>
    <published>2019-08-15T16:39:16.000Z</published>
    <updated>2019-08-15T16:41:39.525Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p></p><p class="description"></p><br>poj2251,三维bfs<p></p><a id="more"></a><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="http://poj.org/problem?id=2251" target="_blank" rel="noopener">http://poj.org/problem?id=2251</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给出一三维空间的地牢,要求求出由字符’S’到字符’E’的最短路径移动方向可以是上，下，左，右，前，后，六个方向，每移动一次就耗费一分钟，要求输出最快的走出时间。不同L层的地图，相同RC坐标处是连通的，“#”不可通过，“.”可走。</p><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><p>标准bfs</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">bool</span> visit[<span class="number">35</span>][<span class="number">35</span>][<span class="number">35</span>];</span><br><span class="line"><span class="keyword">char</span> <span class="built_in">map</span>[<span class="number">35</span>][<span class="number">35</span>][<span class="number">35</span>];</span><br><span class="line"><span class="keyword">int</span> dir[<span class="number">6</span>][<span class="number">3</span>]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> flag;</span><br><span class="line"><span class="keyword">int</span> l,r,c;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,y,z;</span><br><span class="line"><span class="keyword">int</span> s;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">queue</span>&lt;node&gt; q;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())q.pop();</span><br><span class="line"><span class="built_in">memset</span>(visit,<span class="literal">false</span>,<span class="keyword">sizeof</span>(visit));</span><br><span class="line"><span class="built_in">memset</span>(<span class="built_in">map</span>,<span class="string">'.'</span>,<span class="keyword">sizeof</span>(<span class="built_in">map</span>));</span><br><span class="line">flag=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span> || y&lt;<span class="number">0</span> || z&lt;<span class="number">0</span> || x&gt;=l || y&gt;=r || z&gt;=c)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">map</span>[x][y][z] == <span class="string">'#'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(visit[x][y][z])</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,k;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;l,&amp;r,&amp;c)&amp;&amp;(l||r||c))</span><br><span class="line">&#123;</span><br><span class="line">init();</span><br><span class="line">getchar();<span class="comment">//吃回车</span></span><br><span class="line">node start;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;l;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;r;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;c;k++)<span class="comment">//三维的输入</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;ch;</span><br><span class="line"><span class="built_in">map</span>[i][j][k]=ch;</span><br><span class="line"><span class="keyword">if</span>(ch==<span class="string">'S'</span>)<span class="comment">//记录起点位置</span></span><br><span class="line">&#123;</span><br><span class="line">start.x=i;</span><br><span class="line">start.y=j;</span><br><span class="line">start.z=k;</span><br><span class="line">start.s=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">getchar();</span><br><span class="line">&#125;</span><br><span class="line">getchar();</span><br><span class="line">&#125;</span><br><span class="line">q.push(start);</span><br><span class="line">visit[start.x][start.y][start.z]=<span class="number">1</span>;<span class="comment">//标记</span></span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line">node m=q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">map</span>[m.x][m.y][m.z]==<span class="string">'E'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Escaped in %d minute(s).\n"</span>,m.s);</span><br><span class="line">flag=<span class="number">1</span>;<span class="comment">//已经找到</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">node next;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">next=m;</span><br><span class="line">next.x=next.x+dir[i][<span class="number">0</span>];</span><br><span class="line">next.y=next.y+dir[i][<span class="number">1</span>];</span><br><span class="line">next.z=next.z+dir[i][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">if</span>(check(next.x,next.y,next.z))<span class="keyword">continue</span>;</span><br><span class="line">visit[next.x][next.y][next.z]=<span class="literal">true</span>;</span><br><span class="line">next.s=m.s+<span class="number">1</span>;</span><br><span class="line">q.push(next);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!flag)</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Trapped!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p class=&quot;description&quot;&gt;&lt;/p&gt;&lt;br&gt;poj2251,三维bfs&lt;p&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>poj1321</title>
    <link href="https://yuanfang.tech/2019/08/15/poj1321.html"/>
    <id>https://yuanfang.tech/2019/08/15/poj1321.html</id>
    <published>2019-08-15T15:48:46.000Z</published>
    <updated>2019-08-15T15:51:27.977Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p></p><p class="description"></p><br>poj1321,简单dfs<p></p><a id="more"></a><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="http://poj.org/problem?id=1321" target="_blank" rel="noopener">http://poj.org/problem?id=1321</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>在一个给定形状的棋盘（形状可能是不规则的）上面摆放棋子，棋子没有区别。</p><p>要求摆放时任意的两个棋子不能放在棋盘中的同一行或者同一列</p><p>请编程求解对于给定形状和大小的棋盘，摆放k个棋子的所有可行的摆放方案C。</p><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><p>简单dfs，回溯之后记得更改标记</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">char</span> <span class="built_in">map</span>[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> ans,k;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(m==k)</span><br><span class="line">&#123;</span><br><span class="line">ans++;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(x&gt;n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[i]==<span class="number">0</span>&amp;&amp;<span class="built_in">map</span>[x][i]==<span class="string">'#'</span>)<span class="comment">//判断条件 </span></span><br><span class="line">&#123;</span><br><span class="line">vis[i]=<span class="literal">true</span>;<span class="comment">//标记可用 </span></span><br><span class="line">k++;</span><br><span class="line">dfs(x+<span class="number">1</span>);<span class="comment">//下一行 </span></span><br><span class="line">vis[i]=<span class="literal">false</span>;<span class="comment">//回溯之后改回来方便下一列的判断 </span></span><br><span class="line">k--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">dfs(x+<span class="number">1</span>);<span class="comment">//下一行 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m)!=EOF&amp;&amp;n!=<span class="number">-1</span>&amp;&amp;k!=<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">ans=<span class="number">0</span>;</span><br><span class="line">k=<span class="number">0</span>;</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">gets(<span class="built_in">map</span>[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="literal">false</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">dfs(<span class="number">1</span>);<span class="comment">//开始的行数</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p class=&quot;description&quot;&gt;&lt;/p&gt;&lt;br&gt;poj1321,简单dfs&lt;p&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="poj" scheme="https://yuanfang.tech/categories/poj/"/>
    
    
      <category term="kuangbin" scheme="https://yuanfang.tech/tags/kuangbin/"/>
    
      <category term="poj" scheme="https://yuanfang.tech/tags/poj/"/>
    
      <category term="dfs" scheme="https://yuanfang.tech/tags/dfs/"/>
    
  </entry>
  
  <entry>
    <title>poj1258</title>
    <link href="https://yuanfang.tech/2019/08/13/poj1258.html"/>
    <id>https://yuanfang.tech/2019/08/13/poj1258.html</id>
    <published>2019-08-13T10:10:05.000Z</published>
    <updated>2019-08-13T10:12:05.118Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p></p><p class="description"></p><br>poj1258,最小生成树，水<p></p><a id="more"></a><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="http://poj.org/problem?id=1258" target="_blank" rel="noopener">http://poj.org/problem?id=1258</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给你N*N矩阵，表示N个村庄之间的距离。FJ要把N个村庄全都连接起来，求连接的最短距离。</p><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><p>多组输入，记得sum清空</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> e[<span class="number">110</span>][<span class="number">110</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> lowcost[<span class="number">110</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>,n;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prim</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line">lowcost[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">lowcost[i]=e[<span class="number">1</span>][i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> max=inf;</span><br><span class="line"><span class="keyword">int</span> temp;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(lowcost[j]!=<span class="number">0</span>&amp;&amp;lowcost[j]&lt;max)</span><br><span class="line">&#123;</span><br><span class="line">max=lowcost[j];</span><br><span class="line">temp=j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sum=sum+lowcost[temp];</span><br><span class="line">lowcost[temp]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(e[temp][j]&lt;lowcost[j])</span><br><span class="line">&#123;</span><br><span class="line">lowcost[j]=e[temp][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;e[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">prim();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p class=&quot;description&quot;&gt;&lt;/p&gt;&lt;br&gt;poj1258,最小生成树，水&lt;p&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="poj" scheme="https://yuanfang.tech/categories/poj/"/>
    
    
      <category term="kuangbin" scheme="https://yuanfang.tech/tags/kuangbin/"/>
    
      <category term="poj" scheme="https://yuanfang.tech/tags/poj/"/>
    
      <category term="prim" scheme="https://yuanfang.tech/tags/prim/"/>
    
  </entry>
  
</feed>
